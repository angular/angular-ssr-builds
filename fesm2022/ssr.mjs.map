{"version":3,"file":"ssr.mjs","sources":["../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/common-engine/inline-css-processor.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/common-engine/peformance-profiler.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/common-engine/common-engine.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/console.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/tokens.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/url.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/ng.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/render.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/ng-routes.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/assets.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/hooks.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/manifest.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/route-tree.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/router.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/app.mjs"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport Critters from 'critters';\nimport { readFile } from 'node:fs/promises';\n/**\n * Pattern used to extract the media query set by Critters in an `onload` handler.\n */\nconst MEDIA_SET_HANDLER_PATTERN = /^this\\.media=[\"'](.*)[\"'];?$/;\n/**\n * Name of the attribute used to save the Critters media query so it can be re-assigned on load.\n */\nconst CSP_MEDIA_ATTR = 'ngCspMedia';\n/**\n * Script text used to change the media value of the link tags.\n *\n * NOTE:\n * We do not use `document.querySelectorAll('link').forEach((s) => s.addEventListener('load', ...)`\n * because this does not always fire on Chome.\n * See: https://github.com/angular/angular-cli/issues/26932 and https://crbug.com/1521256\n */\nconst LINK_LOAD_SCRIPT_CONTENT = [\n    '(() => {',\n    `  const CSP_MEDIA_ATTR = '${CSP_MEDIA_ATTR}';`,\n    '  const documentElement = document.documentElement;',\n    '  const listener = (e) => {',\n    '    const target = e.target;',\n    `    if (!target || target.tagName !== 'LINK' || !target.hasAttribute(CSP_MEDIA_ATTR)) {`,\n    '     return;',\n    '    }',\n    '    target.media = target.getAttribute(CSP_MEDIA_ATTR);',\n    '    target.removeAttribute(CSP_MEDIA_ATTR);',\n    // Remove onload listener when there are no longer styles that need to be loaded.\n    '    if (!document.head.querySelector(`link[${CSP_MEDIA_ATTR}]`)) {',\n    `      documentElement.removeEventListener('load', listener);`,\n    '    }',\n    '  };',\n    //  We use an event with capturing (the true parameter) because load events don't bubble.\n    `  documentElement.addEventListener('load', listener, true);`,\n    '})();',\n].join('\\n');\nclass CrittersExtended extends Critters {\n    optionsExtended;\n    resourceCache;\n    warnings = [];\n    errors = [];\n    initialEmbedLinkedStylesheet;\n    addedCspScriptsDocuments = new WeakSet();\n    documentNonces = new WeakMap();\n    constructor(optionsExtended, resourceCache) {\n        super({\n            logger: {\n                warn: (s) => this.warnings.push(s),\n                error: (s) => this.errors.push(s),\n                info: () => { },\n            },\n            logLevel: 'warn',\n            path: optionsExtended.outputPath,\n            publicPath: optionsExtended.deployUrl,\n            compress: !!optionsExtended.minify,\n            pruneSource: false,\n            reduceInlineStyles: false,\n            mergeStylesheets: false,\n            // Note: if `preload` changes to anything other than `media`, the logic in\n            // `embedLinkedStylesheetOverride` will have to be updated.\n            preload: 'media',\n            noscriptFallback: true,\n            inlineFonts: true,\n        });\n        this.optionsExtended = optionsExtended;\n        this.resourceCache = resourceCache;\n        // We can't use inheritance to override `embedLinkedStylesheet`, because it's not declared in\n        // the `Critters` .d.ts which means that we can't call the `super` implementation. TS doesn't\n        // allow for `super` to be cast to a different type.\n        this.initialEmbedLinkedStylesheet = this.embedLinkedStylesheet;\n        this.embedLinkedStylesheet = this.embedLinkedStylesheetOverride;\n    }\n    async readFile(path) {\n        let resourceContent = this.resourceCache.get(path);\n        if (resourceContent === undefined) {\n            resourceContent = await readFile(path, 'utf-8');\n            this.resourceCache.set(path, resourceContent);\n        }\n        return resourceContent;\n    }\n    /**\n     * Override of the Critters `embedLinkedStylesheet` method\n     * that makes it work with Angular's CSP APIs.\n     */\n    embedLinkedStylesheetOverride = async (link, document) => {\n        if (link.getAttribute('media') === 'print' && link.next?.name === 'noscript') {\n            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64\n            // NB: this is only needed for the webpack based builders.\n            const media = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (media) {\n                link.removeAttribute('onload');\n                link.setAttribute('media', media[1]);\n                link?.next?.remove();\n            }\n        }\n        const returnValue = await this.initialEmbedLinkedStylesheet(link, document);\n        const cspNonce = this.findCspNonce(document);\n        if (cspNonce) {\n            const crittersMedia = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (crittersMedia) {\n                // If there's a Critters-generated `onload` handler and the file has an Angular CSP nonce,\n                // we have to remove the handler, because it's incompatible with CSP. We save the value\n                // in a different attribute and we generate a script tag with the nonce that uses\n                // `addEventListener` to apply the media query instead.\n                link.removeAttribute('onload');\n                link.setAttribute(CSP_MEDIA_ATTR, crittersMedia[1]);\n                this.conditionallyInsertCspLoadingScript(document, cspNonce, link);\n            }\n            // Ideally we would hook in at the time Critters inserts the `style` tags, but there isn't\n            // a way of doing that at the moment so we fall back to doing it any time a `link` tag is\n            // inserted. We mitigate it by only iterating the direct children of the `<head>` which\n            // should be pretty shallow.\n            document.head.children.forEach((child) => {\n                if (child.tagName === 'style' && !child.hasAttribute('nonce')) {\n                    child.setAttribute('nonce', cspNonce);\n                }\n            });\n        }\n        return returnValue;\n    };\n    /**\n     * Finds the CSP nonce for a specific document.\n     */\n    findCspNonce(document) {\n        if (this.documentNonces.has(document)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.documentNonces.get(document);\n        }\n        // HTML attribute are case-insensitive, but the parser used by Critters is case-sensitive.\n        const nonceElement = document.querySelector('[ngCspNonce], [ngcspnonce]');\n        const cspNonce = nonceElement?.getAttribute('ngCspNonce') || nonceElement?.getAttribute('ngcspnonce') || null;\n        this.documentNonces.set(document, cspNonce);\n        return cspNonce;\n    }\n    /**\n     * Inserts the `script` tag that swaps the critical CSS at runtime,\n     * if one hasn't been inserted into the document already.\n     */\n    conditionallyInsertCspLoadingScript(document, nonce, link) {\n        if (this.addedCspScriptsDocuments.has(document)) {\n            return;\n        }\n        if (document.head.textContent.includes(LINK_LOAD_SCRIPT_CONTENT)) {\n            // Script was already added during the build.\n            this.addedCspScriptsDocuments.add(document);\n            return;\n        }\n        const script = document.createElement('script');\n        script.setAttribute('nonce', nonce);\n        script.textContent = LINK_LOAD_SCRIPT_CONTENT;\n        // Prepend the script to the head since it needs to\n        // run as early as possible, before the `link` tags.\n        document.head.insertBefore(script, link);\n        this.addedCspScriptsDocuments.add(document);\n    }\n}\nexport class InlineCriticalCssProcessor {\n    options;\n    resourceCache = new Map();\n    constructor(options) {\n        this.options = options;\n    }\n    async process(html, options) {\n        const critters = new CrittersExtended({ ...this.options, ...options }, this.resourceCache);\n        const content = await critters.process(html);\n        return {\n            content,\n            errors: critters.errors.length ? critters.errors : undefined,\n            warnings: critters.warnings.length ? critters.warnings : undefined,\n        };\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nconst PERFORMANCE_MARK_PREFIX = 'üÖ∞Ô∏è';\nexport function printPerformanceLogs() {\n    let maxWordLength = 0;\n    const benchmarks = [];\n    for (const { name, duration } of performance.getEntriesByType('measure')) {\n        if (!name.startsWith(PERFORMANCE_MARK_PREFIX)) {\n            continue;\n        }\n        // `üÖ∞Ô∏è:Retrieve SSG Page` -> `Retrieve SSG Page:`\n        const step = name.slice(PERFORMANCE_MARK_PREFIX.length + 1) + ':';\n        if (step.length > maxWordLength) {\n            maxWordLength = step.length;\n        }\n        benchmarks.push([step, `${duration.toFixed(1)}ms`]);\n        performance.clearMeasures(name);\n    }\n    /* eslint-disable no-console */\n    console.log('********** Performance results **********');\n    for (const [step, value] of benchmarks) {\n        const spaces = maxWordLength - step.length + 5;\n        console.log(step + ' '.repeat(spaces) + value);\n    }\n    console.log('*****************************************');\n    /* eslint-enable no-console */\n}\nexport async function runMethodAndMeasurePerf(label, asyncMethod) {\n    const labelName = `${PERFORMANCE_MARK_PREFIX}:${label}`;\n    const startLabel = `start:${labelName}`;\n    const endLabel = `end:${labelName}`;\n    try {\n        performance.mark(startLabel);\n        return await asyncMethod();\n    }\n    finally {\n        performance.mark(endLabel);\n        performance.measure(labelName, startLabel, endLabel);\n        performance.clearMarks(startLabel);\n        performance.clearMarks(endLabel);\n    }\n}\nexport function noopRunMethodAndMeasurePerf(label, asyncMethod) {\n    return asyncMethod();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { renderApplication, renderModule, …µSERVER_CONTEXT } from '@angular/platform-server';\nimport * as fs from 'node:fs';\nimport { dirname, join, normalize, resolve } from 'node:path';\nimport { URL } from 'node:url';\nimport { InlineCriticalCssProcessor } from './inline-css-processor';\nimport { noopRunMethodAndMeasurePerf, printPerformanceLogs, runMethodAndMeasurePerf, } from './peformance-profiler';\nconst SSG_MARKER_REGEXP = /ng-server-context=[\"']\\w*\\|?ssg\\|?\\w*[\"']/;\n/**\n * A common engine to use to server render an application.\n */\nexport class CommonEngine {\n    options;\n    templateCache = new Map();\n    inlineCriticalCssProcessor;\n    pageIsSSG = new Map();\n    constructor(options) {\n        this.options = options;\n        this.inlineCriticalCssProcessor = new InlineCriticalCssProcessor({\n            minify: false,\n        });\n    }\n    /**\n     * Render an HTML document for a specific URL with specified\n     * render options\n     */\n    async render(opts) {\n        const enablePerformanceProfiler = this.options?.enablePerformanceProfiler;\n        const runMethod = enablePerformanceProfiler\n            ? runMethodAndMeasurePerf\n            : noopRunMethodAndMeasurePerf;\n        let html = await runMethod('Retrieve SSG Page', () => this.retrieveSSGPage(opts));\n        if (html === undefined) {\n            html = await runMethod('Render Page', () => this.renderApplication(opts));\n            if (opts.inlineCriticalCss !== false) {\n                const { content, errors, warnings } = await runMethod('Inline Critical CSS', () => \n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.inlineCriticalCss(html, opts));\n                html = content;\n                // eslint-disable-next-line no-console\n                warnings?.forEach((m) => console.warn(m));\n                // eslint-disable-next-line no-console\n                errors?.forEach((m) => console.error(m));\n            }\n        }\n        if (enablePerformanceProfiler) {\n            printPerformanceLogs();\n        }\n        return html;\n    }\n    inlineCriticalCss(html, opts) {\n        return this.inlineCriticalCssProcessor.process(html, {\n            outputPath: opts.publicPath ?? (opts.documentFilePath ? dirname(opts.documentFilePath) : ''),\n        });\n    }\n    async retrieveSSGPage(opts) {\n        const { publicPath, documentFilePath, url } = opts;\n        if (!publicPath || !documentFilePath || url === undefined) {\n            return undefined;\n        }\n        const { pathname } = new URL(url, 'resolve://');\n        // Do not use `resolve` here as otherwise it can lead to path traversal vulnerability.\n        // See: https://portswigger.net/web-security/file-path-traversal\n        const pagePath = join(publicPath, pathname, 'index.html');\n        if (this.pageIsSSG.get(pagePath)) {\n            // Serve pre-rendered page.\n            return fs.promises.readFile(pagePath, 'utf-8');\n        }\n        if (!pagePath.startsWith(normalize(publicPath))) {\n            // Potential path traversal detected.\n            return undefined;\n        }\n        if (pagePath === resolve(documentFilePath) || !(await exists(pagePath))) {\n            // View matches with prerender path or file does not exist.\n            this.pageIsSSG.set(pagePath, false);\n            return undefined;\n        }\n        // Static file exists.\n        const content = await fs.promises.readFile(pagePath, 'utf-8');\n        const isSSG = SSG_MARKER_REGEXP.test(content);\n        this.pageIsSSG.set(pagePath, isSSG);\n        return isSSG ? content : undefined;\n    }\n    async renderApplication(opts) {\n        const moduleOrFactory = this.options?.bootstrap ?? opts.bootstrap;\n        if (!moduleOrFactory) {\n            throw new Error('A module or bootstrap option must be provided.');\n        }\n        const extraProviders = [\n            { provide: …µSERVER_CONTEXT, useValue: 'ssr' },\n            ...(opts.providers ?? []),\n            ...(this.options?.providers ?? []),\n        ];\n        let document = opts.document;\n        if (!document && opts.documentFilePath) {\n            document = await this.getDocument(opts.documentFilePath);\n        }\n        const commonRenderingOptions = {\n            url: opts.url,\n            document,\n        };\n        return isBootstrapFn(moduleOrFactory)\n            ? renderApplication(moduleOrFactory, {\n                platformProviders: extraProviders,\n                ...commonRenderingOptions,\n            })\n            : renderModule(moduleOrFactory, { extraProviders, ...commonRenderingOptions });\n    }\n    /** Retrieve the document from the cache or the filesystem */\n    async getDocument(filePath) {\n        let doc = this.templateCache.get(filePath);\n        if (!doc) {\n            doc = await fs.promises.readFile(filePath, 'utf-8');\n            this.templateCache.set(filePath, doc);\n        }\n        return doc;\n    }\n}\nasync function exists(path) {\n    try {\n        await fs.promises.access(path, fs.constants.F_OK);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isBootstrapFn(value) {\n    // We can differentiate between a module and a bootstrap function by reading compiler-generated `…µmod` static property:\n    return typeof value === 'function' && !('…µmod' in value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { …µConsole } from '@angular/core';\n/**\n * Custom implementation of the Angular Console service that filters out specific log messages.\n *\n * This class extends the internal Angular `…µConsole` class to provide customized logging behavior.\n * It overrides the `log` method to suppress logs that match certain predefined messages.\n */\nexport class Console extends …µConsole {\n    /**\n     * A set of log messages that should be ignored and not printed to the console.\n     */\n    ignoredLogs = new Set(['Angular is running in development mode.']);\n    /**\n     * Logs a message to the console if it is not in the set of ignored messages.\n     *\n     * @param message - The message to log to the console.\n     *\n     * This method overrides the `log` method of the `…µConsole` class. It checks if the\n     * message is in the `ignoredLogs` set. If it is not, it delegates the logging to\n     * the parent class's `log` method. Otherwise, the message is suppressed.\n     */\n    log(message) {\n        if (!this.ignoredLogs.has(message)) {\n            super.log(message);\n        }\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Injection token for the current request.\n */\nexport const REQUEST = new InjectionToken('REQUEST');\n/**\n * Injection token for the response initialization options.\n */\nexport const RESPONSE_INIT = new InjectionToken('RESPONSE_INIT');\n/**\n * Injection token for additional request context.\n */\nexport const REQUEST_CONTEXT = new InjectionToken('REQUEST_CONTEXT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Removes the trailing slash from a URL if it exists.\n *\n * @param url - The URL string from which to remove the trailing slash.\n * @returns The URL string without a trailing slash.\n *\n * @example\n * ```js\n * stripTrailingSlash('path/'); // 'path'\n * stripTrailingSlash('/path');  // '/path'\n * ```\n */\nexport function stripTrailingSlash(url) {\n    // Check if the last character of the URL is a slash\n    return url[url.length - 1] === '/' ? url.slice(0, -1) : url;\n}\n/**\n * Joins URL parts into a single URL string.\n *\n * This function takes multiple URL segments, normalizes them by removing leading\n * and trailing slashes where appropriate, and then joins them into a single URL.\n *\n * @param parts - The parts of the URL to join. Each part can be a string with or without slashes.\n * @returns The joined URL string, with normalized slashes.\n *\n * @example\n * ```js\n * joinUrlParts('path/', '/to/resource'); // '/path/to/resource'\n * joinUrlParts('/path/', 'to/resource'); // '/path/to/resource'\n * ```\n */\nexport function joinUrlParts(...parts) {\n    // Initialize an array with an empty string to always add a leading slash\n    const normalizeParts = [''];\n    for (const part of parts) {\n        if (part === '') {\n            // Skip any empty parts\n            continue;\n        }\n        let normalizedPart = part;\n        if (part[0] === '/') {\n            normalizedPart = normalizedPart.slice(1);\n        }\n        if (part[part.length - 1] === '/') {\n            normalizedPart = normalizedPart.slice(0, -1);\n        }\n        if (normalizedPart !== '') {\n            normalizeParts.push(normalizedPart);\n        }\n    }\n    return normalizeParts.join('/');\n}\n/**\n * Strips `/index.html` from the end of a URL's path, if present.\n *\n * This function is used to convert URLs pointing to an `index.html` file into their directory\n * equivalents. For example, it transforms a URL like `http://www.example.com/page/index.html`\n * into `http://www.example.com/page`.\n *\n * @param url - The URL object to process.\n * @returns A new URL object with `/index.html` removed from the path, if it was present.\n *\n * @example\n * ```typescript\n * const originalUrl = new URL('http://www.example.com/page/index.html');\n * const cleanedUrl = stripIndexHtmlFromURL(originalUrl);\n * console.log(cleanedUrl.href); // Output: 'http://www.example.com/page'\n * ```\n */\nexport function stripIndexHtmlFromURL(url) {\n    if (url.pathname.endsWith('/index.html')) {\n        const modifiedURL = new URL(url);\n        // Remove '/index.html' from the pathname\n        modifiedURL.pathname = modifiedURL.pathname.slice(0, /** '/index.html'.length */ -11);\n        return modifiedURL;\n    }\n    return url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { renderApplication, renderModule } from '@angular/platform-server';\nimport { stripIndexHtmlFromURL } from './url';\n/**\n * Renders an Angular application or module to an HTML string.\n *\n * This function determines whether the provided `bootstrap` value is an Angular module\n * or a bootstrap function and calls the appropriate rendering method (`renderModule` or\n * `renderApplication`) based on that determination.\n *\n * @param html - The HTML string to be used as the initial document content.\n * @param bootstrap - Either an Angular module type or a function that returns a promise\n *                    resolving to an `ApplicationRef`.\n * @param url - The URL of the application. This is used for server-side rendering to\n *              correctly handle route-based rendering.\n * @param platformProviders - An array of platform providers to be used during the\n *                             rendering process.\n * @returns A promise that resolves to a string containing the rendered HTML.\n */\nexport function renderAngular(html, bootstrap, url, platformProviders) {\n    // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n    const urlToRender = stripIndexHtmlFromURL(url).toString();\n    return isNgModule(bootstrap)\n        ? renderModule(bootstrap, {\n            url: urlToRender,\n            document: html,\n            extraProviders: platformProviders,\n        })\n        : renderApplication(bootstrap, {\n            url: urlToRender,\n            document: html,\n            platformProviders,\n        });\n}\n/**\n * Type guard to determine if a given value is an Angular module.\n * Angular modules are identified by the presence of the `…µmod` static property.\n * This function helps distinguish between Angular modules and bootstrap functions.\n *\n * @param value - The value to be checked.\n * @returns True if the value is an Angular module (i.e., it has the `…µmod` property), false otherwise.\n */\nexport function isNgModule(value) {\n    return '…µmod' in value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { …µConsole, …µresetCompiledComponents } from '@angular/core';\nimport { …µSERVER_CONTEXT as SERVER_CONTEXT } from '@angular/platform-server';\nimport { Console } from './console';\nimport { REQUEST, REQUEST_CONTEXT, RESPONSE_INIT } from './tokens';\nimport { renderAngular } from './utils/ng';\n/**\n * Enum representing the different contexts in which server rendering can occur.\n */\nexport var ServerRenderContext;\n(function (ServerRenderContext) {\n    ServerRenderContext[\"SSR\"] = \"ssr\";\n    ServerRenderContext[\"SSG\"] = \"ssg\";\n    ServerRenderContext[\"AppShell\"] = \"app-shell\";\n})(ServerRenderContext || (ServerRenderContext = {}));\n/**\n * Renders an Angular server application to produce a response for the given HTTP request.\n * Supports server-side rendering (SSR), static site generation (SSG), or app shell rendering.\n *\n * @param app - The server application instance to render.\n * @param request - The incoming HTTP request object.\n * @param serverContext - Context specifying the rendering mode.\n * @param requestContext - Optional additional context for the request, such as metadata.\n * @returns A promise that resolves to a response object representing the rendered content.\n */\nexport async function render(app, request, serverContext, requestContext) {\n    const isSsrMode = serverContext === ServerRenderContext.SSR;\n    const responseInit = {};\n    const platformProviders = [\n        {\n            provide: SERVER_CONTEXT,\n            useValue: serverContext,\n        },\n    ];\n    if (isSsrMode) {\n        platformProviders.push({\n            provide: REQUEST,\n            useValue: request,\n        }, {\n            provide: REQUEST_CONTEXT,\n            useValue: requestContext,\n        }, {\n            provide: RESPONSE_INIT,\n            useValue: responseInit,\n        });\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Need to clean up GENERATED_COMP_IDS map in `@angular/core`.\n        // Otherwise an incorrect component ID generation collision detected warning will be displayed in development.\n        // See: https://github.com/angular/angular-cli/issues/25924\n        …µresetCompiledComponents();\n    }\n    // An Angular Console Provider that does not print a set of predefined logs.\n    platformProviders.push({\n        provide: …µConsole,\n        // Using `useClass` would necessitate decorating `Console` with `@Injectable`,\n        // which would require switching from `ts_library` to `ng_module`. This change\n        // would also necessitate various patches of `@angular/bazel` to support ESM.\n        useFactory: () => new Console(),\n    });\n    const { manifest, hooks, assets } = app;\n    let html = await assets.getIndexServerHtml();\n    // Skip extra microtask if there are no pre hooks.\n    if (hooks.has('html:transform:pre')) {\n        html = await hooks.run('html:transform:pre', { html });\n    }\n    return new Response(await renderAngular(html, manifest.bootstrap(), new URL(request.url), platformProviders), responseInit);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { APP_BASE_HREF, PlatformLocation } from '@angular/common';\nimport { ApplicationRef, Compiler, createPlatformFactory, platformCore, …µwhenStable as whenStable, …µConsole, …µresetCompiledComponents, } from '@angular/core';\nimport { INITIAL_CONFIG, …µINTERNAL_SERVER_PLATFORM_PROVIDERS as INTERNAL_SERVER_PLATFORM_PROVIDERS, } from '@angular/platform-server';\nimport { Router, …µloadChildren as loadChildrenHelper } from '@angular/router';\nimport { Console } from '../console';\nimport { isNgModule } from '../utils/ng';\nimport { joinUrlParts } from '../utils/url';\n/**\n * Recursively traverses the Angular router configuration to retrieve routes.\n *\n * Iterates through the router configuration, yielding each route along with its potential\n * redirection or error status. Handles nested routes and lazy-loaded child routes.\n *\n * @param options - An object containing the parameters for traversing routes.\n * @returns An async iterator yielding `RouteResult` objects.\n */\nasync function* traverseRoutesConfig(options) {\n    const { routes, compiler, parentInjector, parentRoute } = options;\n    for (const route of routes) {\n        const { path = '', redirectTo, loadChildren, children } = route;\n        const currentRoutePath = joinUrlParts(parentRoute, path);\n        yield {\n            route: currentRoutePath,\n            redirectTo: typeof redirectTo === 'string'\n                ? resolveRedirectTo(currentRoutePath, redirectTo)\n                : undefined,\n        };\n        if (children?.length) {\n            // Recursively process child routes.\n            yield* traverseRoutesConfig({\n                routes: children,\n                compiler,\n                parentInjector,\n                parentRoute: currentRoutePath,\n            });\n        }\n        if (loadChildren) {\n            // Load and process lazy-loaded child routes.\n            const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\n            if (loadedChildRoutes) {\n                const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\n                yield* traverseRoutesConfig({\n                    routes: childRoutes,\n                    compiler,\n                    parentInjector: injector,\n                    parentRoute: currentRoutePath,\n                });\n            }\n        }\n    }\n}\n/**\n * Resolves the `redirectTo` property for a given route.\n *\n * This function processes the `redirectTo` property to ensure that it correctly\n * resolves relative to the current route path. If `redirectTo` is an absolute path,\n * it is returned as is. If it is a relative path, it is resolved based on the current route path.\n *\n * @param routePath - The current route path.\n * @param redirectTo - The target path for redirection.\n * @returns The resolved redirect path as a string.\n */\nfunction resolveRedirectTo(routePath, redirectTo) {\n    if (redirectTo[0] === '/') {\n        // If the redirectTo path is absolute, return it as is.\n        return redirectTo;\n    }\n    // Resolve relative redirectTo based on the current route path.\n    const segments = routePath.split('/');\n    segments.pop(); // Remove the last segment to make it relative.\n    return joinUrlParts(...segments, redirectTo);\n}\n/**\n * Retrieves routes from the given Angular application.\n *\n * This function initializes an Angular platform, bootstraps the application or module,\n * and retrieves routes from the Angular router configuration. It handles both module-based\n * and function-based bootstrapping. It yields the resulting routes as `RouteResult` objects.\n *\n * @param bootstrap - A function that returns a promise resolving to an `ApplicationRef` or an Angular module to bootstrap.\n * @param document - The initial HTML document used for server-side rendering.\n * This document is necessary to render the application on the server.\n * @param url - The URL for server-side rendering. The URL is used to configure `ServerPlatformLocation`. This configuration is crucial\n * for ensuring that API requests for relative paths succeed, which is essential for accurate route extraction.\n * See:\n *  - https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51\n *  - https://github.com/angular/angular/blob/6882cc7d9eed26d3caeedca027452367ba25f2b9/packages/platform-server/src/http.ts#L44\n * @returns A promise that resolves to an object of type `AngularRouterConfigResult`.\n */\nexport async function getRoutesFromAngularRouterConfig(bootstrap, document, url) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Need to clean up GENERATED_COMP_IDS map in `@angular/core`.\n        // Otherwise an incorrect component ID generation collision detected warning will be displayed in development.\n        // See: https://github.com/angular/angular-cli/issues/25924\n        …µresetCompiledComponents();\n    }\n    const { protocol, host } = url;\n    // Create and initialize the Angular platform for server-side rendering.\n    const platformRef = createPlatformFactory(platformCore, 'server', [\n        {\n            provide: INITIAL_CONFIG,\n            useValue: { document, url: `${protocol}//${host}/` },\n        },\n        {\n            provide: …µConsole,\n            useFactory: () => new Console(),\n        },\n        ...INTERNAL_SERVER_PLATFORM_PROVIDERS,\n    ])();\n    try {\n        let applicationRef;\n        if (isNgModule(bootstrap)) {\n            const moduleRef = await platformRef.bootstrapModule(bootstrap);\n            applicationRef = moduleRef.injector.get(ApplicationRef);\n        }\n        else {\n            applicationRef = await bootstrap();\n        }\n        // Wait until the application is stable.\n        await whenStable(applicationRef);\n        const injector = applicationRef.injector;\n        const router = injector.get(Router);\n        const routesResults = [];\n        if (router.config.length) {\n            const compiler = injector.get(Compiler);\n            // Retrieve all routes from the Angular router configuration.\n            const traverseRoutes = traverseRoutesConfig({\n                routes: router.config,\n                compiler,\n                parentInjector: injector,\n                parentRoute: '',\n            });\n            for await (const result of traverseRoutes) {\n                routesResults.push(result);\n            }\n        }\n        else {\n            routesResults.push({ route: '' });\n        }\n        const baseHref = injector.get(APP_BASE_HREF, null, { optional: true }) ??\n            injector.get(PlatformLocation).getBaseHrefFromDOM();\n        return {\n            baseHref,\n            routes: routesResults,\n        };\n    }\n    finally {\n        platformRef.destroy();\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages server-side assets.\n */\nexport class ServerAssets {\n    manifest;\n    /**\n     * Creates an instance of ServerAsset.\n     *\n     * @param manifest - The manifest containing the server assets.\n     */\n    constructor(manifest) {\n        this.manifest = manifest;\n    }\n    /**\n     * Retrieves the content of a server-side asset using its path.\n     *\n     * @param path - The path to the server asset.\n     * @returns A promise that resolves to the asset content as a string.\n     * @throws Error If the asset path is not found in the manifest, an error is thrown.\n     */\n    async getServerAsset(path) {\n        const asset = this.manifest.assets.get(path);\n        if (!asset) {\n            throw new Error(`Server asset '${path}' does not exist.`);\n        }\n        return asset();\n    }\n    /**\n     * Retrieves and caches the content of 'index.server.html'.\n     *\n     * @returns A promise that resolves to the content of 'index.server.html'.\n     * @throws Error If there is an issue retrieving the asset.\n     */\n    getIndexServerHtml() {\n        return this.getServerAsset('index.server.html');\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages a collection of hooks and provides methods to register and execute them.\n * Hooks are functions that can be invoked with specific arguments to allow modifications or enhancements.\n */\nexport class Hooks {\n    /**\n     * A map of hook names to arrays of hook functions.\n     * Each hook name can have multiple associated functions, which are executed in sequence.\n     */\n    store = new Map();\n    /**\n     * Executes all hooks associated with the specified name, passing the given argument to each hook function.\n     * The hooks are invoked sequentially, and the argument may be modified by each hook.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook whose functions will be executed.\n     * @param context - The input value to be passed to each hook function. The value is mutated by each hook function.\n     * @returns A promise that resolves once all hook functions have been executed.\n     *\n     * @example\n     * ```typescript\n     * const hooks = new Hooks();\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   ctx.html = ctx.html.replace(/foo/g, 'bar');\n     *   return ctx.html;\n     * });\n     * const result = await hooks.run('html:transform:pre', { html: '<div>foo</div>' });\n     * console.log(result); // '<div>bar</div>'\n     * ```\n     * @internal\n     */\n    async run(name, context) {\n        const hooks = this.store.get(name);\n        switch (name) {\n            case 'html:transform:pre': {\n                if (!hooks) {\n                    return context.html;\n                }\n                const ctx = { ...context };\n                for (const hook of hooks) {\n                    ctx.html = await hook(ctx);\n                }\n                return ctx.html;\n            }\n            default:\n                throw new Error(`Running hook \"${name}\" is not supported.`);\n        }\n    }\n    /**\n     * Registers a new hook function under the specified hook name.\n     * This function should be a function that takes an argument of type `T` and returns a `string` or `Promise<string>`.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook under which the function will be registered.\n     * @param handler - A function to be executed when the hook is triggered. The handler will be called with an argument\n     *                  that may be modified by the hook functions.\n     *\n     * @remarks\n     * - If there are existing handlers registered under the given hook name, the new handler will be added to the list.\n     * - If no handlers are registered under the given hook name, a new list will be created with the handler as its first element.\n     *\n     * @example\n     * ```typescript\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   return ctx.html.replace(/foo/g, 'bar');\n     * });\n     * ```\n     */\n    on(name, handler) {\n        const hooks = this.store.get(name);\n        if (hooks) {\n            hooks.push(handler);\n        }\n        else {\n            this.store.set(name, [handler]);\n        }\n    }\n    /**\n     * Checks if there are any hooks registered under the specified name.\n     *\n     * @param name - The name of the hook to check.\n     * @returns `true` if there are hooks registered under the specified name, otherwise `false`.\n     */\n    has(name) {\n        return !!this.store.get(name)?.length;\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * The Angular app manifest object.\n * This is used internally to store the current Angular app manifest.\n */\nlet angularAppManifest;\n/**\n * Sets the Angular app manifest.\n *\n * @param manifest - The manifest object to set for the Angular application.\n */\nexport function setAngularAppManifest(manifest) {\n    angularAppManifest = manifest;\n}\n/**\n * Gets the Angular app manifest.\n *\n * @returns The Angular app manifest.\n * @throws Will throw an error if the Angular app manifest is not set.\n */\nexport function getAngularAppManifest() {\n    if (!angularAppManifest) {\n        throw new Error('Angular app manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppManifest;\n}\n/**\n * The Angular app engine manifest object.\n * This is used internally to store the current Angular app engine manifest.\n */\nlet angularAppEngineManifest;\n/**\n * Sets the Angular app engine manifest.\n *\n * @param manifest - The engine manifest object to set.\n */\nexport function setAngularAppEngineManifest(manifest) {\n    angularAppEngineManifest = manifest;\n}\n/**\n * Gets the Angular app engine manifest.\n *\n * @returns The Angular app engine manifest.\n * @throws Will throw an error if the Angular app engine manifest is not set.\n */\nexport function getAngularAppEngineManifest() {\n    if (!angularAppEngineManifest) {\n        throw new Error('Angular app engine manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppEngineManifest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { stripTrailingSlash } from '../utils/url';\n/**\n * A route tree implementation that supports efficient route matching, including support for wildcard routes.\n * This structure is useful for organizing and retrieving routes in a hierarchical manner,\n * enabling complex routing scenarios with nested paths.\n */\nexport class RouteTree {\n    /**\n     * The root node of the route tree.\n     * All routes are stored and accessed relative to this root node.\n     */\n    root = this.createEmptyRouteTreeNode('');\n    /**\n     * A counter that tracks the order of route insertion.\n     * This ensures that routes are matched in the order they were defined,\n     * with earlier routes taking precedence.\n     */\n    insertionIndexCounter = 0;\n    /**\n     * Inserts a new route into the route tree.\n     * The route is broken down into segments, and each segment is added to the tree.\n     * Parameterized segments (e.g., :id) are normalized to wildcards (*) for matching purposes.\n     *\n     * @param route - The route path to insert into the tree.\n     * @param metadata - Metadata associated with the route, excluding the route path itself.\n     */\n    insert(route, metadata) {\n        let node = this.root;\n        const normalizedRoute = stripTrailingSlash(route);\n        const segments = normalizedRoute.split('/');\n        for (const segment of segments) {\n            // Replace parameterized segments (e.g., :id) with a wildcard (*) for matching\n            const normalizedSegment = segment[0] === ':' ? '*' : segment;\n            let childNode = node.children.get(normalizedSegment);\n            if (!childNode) {\n                childNode = this.createEmptyRouteTreeNode(normalizedSegment);\n                node.children.set(normalizedSegment, childNode);\n            }\n            node = childNode;\n        }\n        // At the leaf node, store the full route and its associated metadata\n        node.metadata = {\n            ...metadata,\n            route: normalizedRoute,\n        };\n        node.insertionIndex = this.insertionIndexCounter++;\n    }\n    /**\n     * Matches a given route against the route tree and returns the best matching route's metadata.\n     * The best match is determined by the lowest insertion index, meaning the earliest defined route\n     * takes precedence.\n     *\n     * @param route - The route path to match against the route tree.\n     * @returns The metadata of the best matching route or `undefined` if no match is found.\n     */\n    match(route) {\n        const segments = stripTrailingSlash(route).split('/');\n        return this.traverseBySegments(segments)?.metadata;\n    }\n    /**\n     * Converts the route tree into a serialized format representation.\n     * This method converts the route tree into an array of metadata objects that describe the structure of the tree.\n     * The array represents the routes in a nested manner where each entry includes the route and its associated metadata.\n     *\n     * @returns An array of `RouteTreeNodeMetadata` objects representing the route tree structure.\n     *          Each object includes the `route` and associated metadata of a route.\n     */\n    toObject() {\n        return Array.from(this.traverse());\n    }\n    /**\n     * Constructs a `RouteTree` from an object representation.\n     * This method is used to recreate a `RouteTree` instance from an array of metadata objects.\n     * The array should be in the format produced by `toObject`, allowing for the reconstruction of the route tree\n     * with the same routes and metadata.\n     *\n     * @param value - An array of `RouteTreeNodeMetadata` objects that represent the serialized format of the route tree.\n     *                Each object should include a `route` and its associated metadata.\n     * @returns A new `RouteTree` instance constructed from the provided metadata objects.\n     */\n    static fromObject(value) {\n        const tree = new RouteTree();\n        for (const { route, ...metadata } of value) {\n            tree.insert(route, metadata);\n        }\n        return tree;\n    }\n    /**\n     * A generator function that recursively traverses the route tree and yields the metadata of each node.\n     * This allows for easy and efficient iteration over all nodes in the tree.\n     *\n     * @param node - The current node to start the traversal from. Defaults to the root node of the tree.\n     */\n    *traverse(node = this.root) {\n        if (node.metadata) {\n            yield node.metadata;\n        }\n        for (const childNode of node.children.values()) {\n            yield* this.traverse(childNode);\n        }\n    }\n    /**\n     * Recursively traverses the route tree from a given node, attempting to match the remaining route segments.\n     * If the node is a leaf node (no more segments to match) and contains metadata, the node is yielded.\n     *\n     * This function prioritizes exact segment matches first, followed by wildcard matches (`*`),\n     * and finally deep wildcard matches (`**`) that consume all segments.\n     *\n     * @param remainingSegments - The remaining segments of the route path to match.\n     * @param node - The current node in the route tree to start traversal from.\n     *\n     * @returns The node that best matches the remaining segments or `undefined` if no match is found.\n     */\n    traverseBySegments(remainingSegments, node = this.root) {\n        const { metadata, children } = node;\n        // If there are no remaining segments and the node has metadata, return this node\n        if (!remainingSegments?.length) {\n            if (metadata) {\n                return node;\n            }\n            return;\n        }\n        // If the node has no children, end the traversal\n        if (!children.size) {\n            return;\n        }\n        const [segment, ...restSegments] = remainingSegments;\n        let currentBestMatchNode;\n        // 1. Exact segment match\n        const exactMatchNode = node.children.get(segment);\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, exactMatchNode));\n        // 2. Wildcard segment match (`*`)\n        const wildcardNode = node.children.get('*');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, wildcardNode));\n        // 3. Deep wildcard segment match (`**`)\n        const deepWildcardNode = node.children.get('**');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, deepWildcardNode);\n        return currentBestMatchNode;\n    }\n    /**\n     * Compares two nodes and returns the node with higher priority based on insertion index.\n     * A node with a lower insertion index is prioritized as it was defined earlier.\n     *\n     * @param currentBestMatchNode - The current best match node.\n     * @param candidateNode - The node being evaluated for higher priority based on insertion index.\n     * @returns The node with higher priority (i.e., lower insertion index). If one of the nodes is `undefined`, the other node is returned.\n     */\n    getHigherPriorityNode(currentBestMatchNode, candidateNode) {\n        if (!candidateNode) {\n            return currentBestMatchNode;\n        }\n        if (!currentBestMatchNode) {\n            return candidateNode;\n        }\n        return candidateNode.insertionIndex < currentBestMatchNode.insertionIndex\n            ? candidateNode\n            : currentBestMatchNode;\n    }\n    /**\n     * Creates an empty route tree node with the specified segment.\n     * This helper function is used during the tree construction.\n     *\n     * @param segment - The route segment that this node represents.\n     * @returns A new, empty route tree node.\n     */\n    createEmptyRouteTreeNode(segment) {\n        return {\n            segment,\n            insertionIndex: -1,\n            children: new Map(),\n        };\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ServerAssets } from '../assets';\nimport { joinUrlParts, stripIndexHtmlFromURL } from '../utils/url';\nimport { getRoutesFromAngularRouterConfig } from './ng-routes';\nimport { RouteTree } from './route-tree';\n/**\n * Manages the application's server routing logic by building and maintaining a route tree.\n *\n * This class is responsible for constructing the route tree from the Angular application\n * configuration and using it to match incoming requests to the appropriate routes.\n */\nexport class ServerRouter {\n    routeTree;\n    /**\n     * Creates an instance of the `ServerRouter`.\n     *\n     * @param routeTree - An instance of `RouteTree` that holds the routing information.\n     * The `RouteTree` is used to match request URLs to the appropriate route metadata.\n     */\n    constructor(routeTree) {\n        this.routeTree = routeTree;\n    }\n    /**\n     * Static property to track the ongoing build promise.\n     */\n    static #extractionPromise;\n    /**\n     * Creates or retrieves a `ServerRouter` instance based on the provided manifest and URL.\n     *\n     * If the manifest contains pre-built routes, a new `ServerRouter` is immediately created.\n     * Otherwise, it builds the router by extracting routes from the Angular configuration\n     * asynchronously. This method ensures that concurrent builds are prevented by re-using\n     * the same promise.\n     *\n     * @param manifest - An instance of `AngularAppManifest` that contains the route information.\n     * @param url - The URL for server-side rendering. The URL is needed to configure `ServerPlatformLocation`.\n     * This is necessary to ensure that API requests for relative paths succeed, which is crucial for correct route extraction.\n     * [Reference](https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51)\n     * @returns A promise resolving to a `ServerRouter` instance.\n     */\n    static from(manifest, url) {\n        if (manifest.routes) {\n            const routeTree = RouteTree.fromObject(manifest.routes);\n            return Promise.resolve(new ServerRouter(routeTree));\n        }\n        // Create and store a new promise for the build process.\n        // This prevents concurrent builds by re-using the same promise.\n        ServerRouter.#extractionPromise ??= (async () => {\n            try {\n                const routeTree = new RouteTree();\n                const document = await new ServerAssets(manifest).getIndexServerHtml();\n                const { baseHref, routes } = await getRoutesFromAngularRouterConfig(manifest.bootstrap(), document, url);\n                for (let { route, redirectTo } of routes) {\n                    route = joinUrlParts(baseHref, route);\n                    redirectTo = redirectTo === undefined ? undefined : joinUrlParts(baseHref, redirectTo);\n                    routeTree.insert(route, { redirectTo });\n                }\n                return new ServerRouter(routeTree);\n            }\n            finally {\n                ServerRouter.#extractionPromise = undefined;\n            }\n        })();\n        return ServerRouter.#extractionPromise;\n    }\n    /**\n     * Matches a request URL against the route tree to retrieve route metadata.\n     *\n     * This method strips 'index.html' from the URL if it is present and then attempts\n     * to find a match in the route tree. If a match is found, it returns the associated\n     * route metadata; otherwise, it returns `undefined`.\n     *\n     * @param url - The URL to be matched against the route tree.\n     * @returns The metadata for the matched route or `undefined` if no match is found.\n     */\n    match(url) {\n        // Strip 'index.html' from URL if present.\n        // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n        const { pathname } = stripIndexHtmlFromURL(url);\n        return this.routeTree.match(decodeURIComponent(pathname));\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ServerAssets } from './assets';\nimport { Hooks } from './hooks';\nimport { getAngularAppManifest } from './manifest';\nimport { ServerRenderContext, render } from './render';\nimport { ServerRouter } from './routes/router';\n/**\n * Represents a locale-specific Angular server application managed by the server application engine.\n *\n * The `AngularServerApp` class handles server-side rendering and asset management for a specific locale.\n */\nexport class AngularServerApp {\n    /**\n     * Hooks for extending or modifying the behavior of the server application.\n     * This instance can be used to attach custom functionality to various events in the server application lifecycle.\n     */\n    hooks = new Hooks();\n    /**\n     * The manifest associated with this server application.\n     * @internal\n     */\n    manifest = getAngularAppManifest();\n    /**\n     * An instance of ServerAsset that handles server-side asset.\n     * @internal\n     */\n    assets = new ServerAssets(this.manifest);\n    /**\n     * The router instance used for route matching and handling.\n     */\n    router;\n    /**\n     * Renders a response for the given HTTP request using the server application.\n     *\n     * This method processes the request and returns a response based on the specified rendering context.\n     *\n     * @param request - The incoming HTTP request to be rendered.\n     * @param requestContext - Optional additional context for rendering, such as request metadata.\n     * @param serverContext - The rendering context.\n     *\n     * @returns A promise that resolves to the HTTP response object resulting from the rendering, or null if no match is found.\n     */\n    async render(request, requestContext, serverContext = ServerRenderContext.SSR) {\n        const url = new URL(request.url);\n        this.router ??= await ServerRouter.from(this.manifest, url);\n        const matchedRoute = this.router.match(url);\n        if (!matchedRoute) {\n            // Not a known Angular route.\n            return null;\n        }\n        const { redirectTo } = matchedRoute;\n        if (redirectTo !== undefined) {\n            // 302 Found is used by default for redirections\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect_static#status\n            return Response.redirect(new URL(redirectTo, url), 302);\n        }\n        return render(this, request, serverContext, requestContext);\n    }\n}\nlet angularServerApp;\n/**\n * Retrieves or creates an instance of `AngularServerApp`.\n * - If an instance of `AngularServerApp` already exists, it will return the existing one.\n * - If no instance exists, it will create a new one with the provided options.\n * @returns The existing or newly created instance of `AngularServerApp`.\n */\nexport function getOrCreateAngularServerApp() {\n    return (angularServerApp ??= new AngularServerApp());\n}\n/**\n * Resets the instance of `AngularServerApp` to undefined, effectively\n * clearing the reference. Use this to recreate the instance.\n */\nexport function resetAngularServerApp() {\n    angularServerApp = undefined;\n}\n/**\n * Destroys the existing `AngularServerApp` instance, releasing associated resources and resetting the\n * reference to `undefined`.\n *\n * This function is primarily used to enable the recreation of the `AngularServerApp` instance,\n * typically when server configuration or application state needs to be refreshed.\n */\nexport function destroyAngularServerApp() {\n    angularServerApp = undefined;\n}\n"],"names":["URL","…µSERVER_CONTEXT","…µConsole","SERVER_CONTEXT","…µresetCompiledComponents","loadChildrenHelper","INTERNAL_SERVER_PLATFORM_PROVIDERS","whenStable"],"mappings":"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"}