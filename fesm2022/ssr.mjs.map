{"version":3,"file":"ssr.mjs","sources":["../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/assets.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/console.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/manifest.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/url.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/ng.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/route-config.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/route-tree.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/ng-routes.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/hooks.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/routes/router.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/tokens.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/utils/inline-critical-css.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/app.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/private_export.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/i18n.mjs","../../../../../../k8-fastbuild-ST-70f2edae98f4/bin/packages/angular/ssr/src/app-engine.mjs"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages server-side assets.\n */\nexport class ServerAssets {\n    /**\n     * Creates an instance of ServerAsset.\n     *\n     * @param manifest - The manifest containing the server assets.\n     */\n    constructor(manifest) {\n        this.manifest = manifest;\n    }\n    /**\n     * Retrieves the content of a server-side asset using its path.\n     *\n     * @param path - The path to the server asset.\n     * @returns A promise that resolves to the asset content as a string.\n     * @throws Error If the asset path is not found in the manifest, an error is thrown.\n     */\n    async getServerAsset(path) {\n        const asset = this.manifest.assets.get(path);\n        if (!asset) {\n            throw new Error(`Server asset '${path}' does not exist.`);\n        }\n        return asset();\n    }\n    /**\n     * Retrieves and caches the content of 'index.server.html'.\n     *\n     * @returns A promise that resolves to the content of 'index.server.html'.\n     * @throws Error If there is an issue retrieving the asset.\n     */\n    getIndexServerHtml() {\n        return this.getServerAsset('index.server.html');\n    }\n}\n//# sourceMappingURL=assets.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ɵConsole } from '@angular/core';\n/**\n * Custom implementation of the Angular Console service that filters out specific log messages.\n *\n * This class extends the internal Angular `ɵConsole` class to provide customized logging behavior.\n * It overrides the `log` method to suppress logs that match certain predefined messages.\n */\nexport class Console extends ɵConsole {\n    constructor() {\n        super(...arguments);\n        /**\n         * A set of log messages that should be ignored and not printed to the console.\n         */\n        this.ignoredLogs = new Set(['Angular is running in development mode.']);\n    }\n    /**\n     * Logs a message to the console if it is not in the set of ignored messages.\n     *\n     * @param message - The message to log to the console.\n     *\n     * This method overrides the `log` method of the `ɵConsole` class. It checks if the\n     * message is in the `ignoredLogs` set. If it is not, it delegates the logging to\n     * the parent class's `log` method. Otherwise, the message is suppressed.\n     */\n    log(message) {\n        if (!this.ignoredLogs.has(message)) {\n            super.log(message);\n        }\n    }\n}\n//# sourceMappingURL=console.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * The Angular app manifest object.\n * This is used internally to store the current Angular app manifest.\n */\nlet angularAppManifest;\n/**\n * Sets the Angular app manifest.\n *\n * @param manifest - The manifest object to set for the Angular application.\n */\nexport function setAngularAppManifest(manifest) {\n    angularAppManifest = manifest;\n}\n/**\n * Gets the Angular app manifest.\n *\n * @returns The Angular app manifest.\n * @throws Will throw an error if the Angular app manifest is not set.\n */\nexport function getAngularAppManifest() {\n    if (!angularAppManifest) {\n        throw new Error('Angular app manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppManifest;\n}\n/**\n * The Angular app engine manifest object.\n * This is used internally to store the current Angular app engine manifest.\n */\nlet angularAppEngineManifest;\n/**\n * Sets the Angular app engine manifest.\n *\n * @param manifest - The engine manifest object to set.\n */\nexport function setAngularAppEngineManifest(manifest) {\n    angularAppEngineManifest = manifest;\n}\n/**\n * Gets the Angular app engine manifest.\n *\n * @returns The Angular app engine manifest.\n * @throws Will throw an error if the Angular app engine manifest is not set.\n */\nexport function getAngularAppEngineManifest() {\n    if (!angularAppEngineManifest) {\n        throw new Error('Angular app engine manifest is not set. ' +\n            `Please ensure you are using the '@angular/build:application' builder to build your server application.`);\n    }\n    return angularAppEngineManifest;\n}\n//# sourceMappingURL=manifest.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Removes the trailing slash from a URL if it exists.\n *\n * @param url - The URL string from which to remove the trailing slash.\n * @returns The URL string without a trailing slash.\n *\n * @example\n * ```js\n * stripTrailingSlash('path/'); // 'path'\n * stripTrailingSlash('/path');  // '/path'\n * ```\n */\nexport function stripTrailingSlash(url) {\n    // Check if the last character of the URL is a slash\n    return url[url.length - 1] === '/' ? url.slice(0, -1) : url;\n}\n/**\n * Joins URL parts into a single URL string.\n *\n * This function takes multiple URL segments, normalizes them by removing leading\n * and trailing slashes where appropriate, and then joins them into a single URL.\n *\n * @param parts - The parts of the URL to join. Each part can be a string with or without slashes.\n * @returns The joined URL string, with normalized slashes.\n *\n * @example\n * ```js\n * joinUrlParts('path/', '/to/resource'); // '/path/to/resource'\n * joinUrlParts('/path/', 'to/resource'); // '/path/to/resource'\n * ```\n */\nexport function joinUrlParts(...parts) {\n    // Initialize an array with an empty string to always add a leading slash\n    const normalizeParts = [''];\n    for (const part of parts) {\n        if (part === '') {\n            // Skip any empty parts\n            continue;\n        }\n        let normalizedPart = part;\n        if (part[0] === '/') {\n            normalizedPart = normalizedPart.slice(1);\n        }\n        if (part[part.length - 1] === '/') {\n            normalizedPart = normalizedPart.slice(0, -1);\n        }\n        if (normalizedPart !== '') {\n            normalizeParts.push(normalizedPart);\n        }\n    }\n    return normalizeParts.join('/');\n}\n/**\n * Strips `/index.html` from the end of a URL's path, if present.\n *\n * This function is used to convert URLs pointing to an `index.html` file into their directory\n * equivalents. For example, it transforms a URL like `http://www.example.com/page/index.html`\n * into `http://www.example.com/page`.\n *\n * @param url - The URL object to process.\n * @returns A new URL object with `/index.html` removed from the path, if it was present.\n *\n * @example\n * ```typescript\n * const originalUrl = new URL('http://www.example.com/page/index.html');\n * const cleanedUrl = stripIndexHtmlFromURL(originalUrl);\n * console.log(cleanedUrl.href); // Output: 'http://www.example.com/page'\n * ```\n */\nexport function stripIndexHtmlFromURL(url) {\n    if (url.pathname.endsWith('/index.html')) {\n        const modifiedURL = new URL(url);\n        // Remove '/index.html' from the pathname\n        modifiedURL.pathname = modifiedURL.pathname.slice(0, /** '/index.html'.length */ -11);\n        return modifiedURL;\n    }\n    return url;\n}\n//# sourceMappingURL=url.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ɵConsole } from '@angular/core';\nimport { ɵSERVER_CONTEXT as SERVER_CONTEXT, renderApplication, renderModule, } from '@angular/platform-server';\nimport { Console } from '../console';\nimport { stripIndexHtmlFromURL } from './url';\n/**\n * Renders an Angular application or module to an HTML string.\n *\n * This function determines whether the provided `bootstrap` value is an Angular module\n * or a bootstrap function and calls the appropriate rendering method (`renderModule` or\n * `renderApplication`) based on that determination.\n *\n * @param html - The HTML string to be used as the initial document content.\n * @param bootstrap - Either an Angular module type or a function that returns a promise\n *                    resolving to an `ApplicationRef`.\n * @param url - The URL of the application. This is used for server-side rendering to\n *              correctly handle route-based rendering.\n * @param platformProviders - An array of platform providers to be used during the\n *                             rendering process.\n * @param serverContext - A string representing the server context, used to provide additional\n *                        context or metadata during server-side rendering.\n * @returns A promise that resolves to a string containing the rendered HTML.\n */\nexport function renderAngular(html, bootstrap, url, platformProviders, serverContext) {\n    const providers = [\n        {\n            provide: SERVER_CONTEXT,\n            useValue: serverContext,\n        },\n        {\n            // An Angular Console Provider that does not print a set of predefined logs.\n            provide: ɵConsole,\n            // Using `useClass` would necessitate decorating `Console` with `@Injectable`,\n            // which would require switching from `ts_library` to `ng_module`. This change\n            // would also necessitate various patches of `@angular/bazel` to support ESM.\n            useFactory: () => new Console(),\n        },\n        ...platformProviders,\n    ];\n    // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n    const urlToRender = stripIndexHtmlFromURL(url).toString();\n    return isNgModule(bootstrap)\n        ? renderModule(bootstrap, {\n            url: urlToRender,\n            document: html,\n            extraProviders: providers,\n        })\n        : renderApplication(bootstrap, {\n            url: urlToRender,\n            document: html,\n            platformProviders: providers,\n        });\n}\n/**\n * Type guard to determine if a given value is an Angular module.\n * Angular modules are identified by the presence of the `ɵmod` static property.\n * This function helps distinguish between Angular modules and bootstrap functions.\n *\n * @param value - The value to be checked.\n * @returns True if the value is an Angular module (i.e., it has the `ɵmod` property), false otherwise.\n */\nexport function isNgModule(value) {\n    return 'ɵmod' in value;\n}\n//# sourceMappingURL=ng.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { InjectionToken, makeEnvironmentProviders } from '@angular/core';\n/**\n * Different rendering modes for server routes.\n * @developerPreview\n */\nexport var RenderMode;\n(function (RenderMode) {\n    /** AppShell rendering mode, typically used for pre-rendered shells of the application. */\n    RenderMode[RenderMode[\"AppShell\"] = 0] = \"AppShell\";\n    /** Server-Side Rendering (SSR) mode, where content is rendered on the server for each request. */\n    RenderMode[RenderMode[\"Server\"] = 1] = \"Server\";\n    /** Client-Side Rendering (CSR) mode, where content is rendered on the client side in the browser. */\n    RenderMode[RenderMode[\"Client\"] = 2] = \"Client\";\n    /** Static Site Generation (SSG) mode, where content is pre-rendered at build time and served as static files. */\n    RenderMode[RenderMode[\"Prerender\"] = 3] = \"Prerender\";\n})(RenderMode || (RenderMode = {}));\n/**\n * Defines the fallback strategies for Static Site Generation (SSG) routes when a pre-rendered path is not available.\n * This is particularly relevant for routes with parameterized URLs where some paths might not be pre-rendered at build time.\n *\n * @developerPreview\n */\nexport var PrerenderFallback;\n(function (PrerenderFallback) {\n    /**\n     * Fallback to Server-Side Rendering (SSR) if the pre-rendered path is not available.\n     * This strategy dynamically generates the page on the server at request time.\n     */\n    PrerenderFallback[PrerenderFallback[\"Server\"] = 0] = \"Server\";\n    /**\n     * Fallback to Client-Side Rendering (CSR) if the pre-rendered path is not available.\n     * This strategy allows the page to be rendered on the client side.\n     */\n    PrerenderFallback[PrerenderFallback[\"Client\"] = 1] = \"Client\";\n    /**\n     * No fallback; if the path is not pre-rendered, the server will not handle the request.\n     * This means the application will not provide any response for paths that are not pre-rendered.\n     */\n    PrerenderFallback[PrerenderFallback[\"None\"] = 2] = \"None\";\n})(PrerenderFallback || (PrerenderFallback = {}));\n/**\n * Token for providing the server routes configuration.\n * @internal\n */\nexport const SERVER_ROUTES_CONFIG = new InjectionToken('SERVER_ROUTES_CONFIG');\n/**\n * Configures the necessary providers for server routes configuration.\n *\n * @param routes - An array of server routes to be provided.\n * @returns An `EnvironmentProviders` object that contains the server routes configuration.\n * @developerPreview\n */\nexport function provideServerRoutesConfig(routes) {\n    return makeEnvironmentProviders([\n        {\n            provide: SERVER_ROUTES_CONFIG,\n            useValue: routes,\n        },\n    ]);\n}\n//# sourceMappingURL=route-config.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { stripTrailingSlash } from '../utils/url';\n/**\n * A route tree implementation that supports efficient route matching, including support for wildcard routes.\n * This structure is useful for organizing and retrieving routes in a hierarchical manner,\n * enabling complex routing scenarios with nested paths.\n *\n * @typeParam AdditionalMetadata - Type of additional metadata that can be associated with route nodes.\n */\nexport class RouteTree {\n    constructor() {\n        /**\n         * The root node of the route tree.\n         * All routes are stored and accessed relative to this root node.\n         */\n        this.root = this.createEmptyRouteTreeNode('');\n        /**\n         * A counter that tracks the order of route insertion.\n         * This ensures that routes are matched in the order they were defined,\n         * with earlier routes taking precedence.\n         */\n        this.insertionIndexCounter = 0;\n    }\n    /**\n     * Inserts a new route into the route tree.\n     * The route is broken down into segments, and each segment is added to the tree.\n     * Parameterized segments (e.g., :id) are normalized to wildcards (*) for matching purposes.\n     *\n     * @param route - The route path to insert into the tree.\n     * @param metadata - Metadata associated with the route, excluding the route path itself.\n     */\n    insert(route, metadata) {\n        let node = this.root;\n        const normalizedRoute = stripTrailingSlash(route);\n        const segments = normalizedRoute.split('/');\n        for (const segment of segments) {\n            // Replace parameterized segments (e.g., :id) with a wildcard (*) for matching\n            const normalizedSegment = segment[0] === ':' ? '*' : segment;\n            let childNode = node.children.get(normalizedSegment);\n            if (!childNode) {\n                childNode = this.createEmptyRouteTreeNode(normalizedSegment);\n                node.children.set(normalizedSegment, childNode);\n            }\n            node = childNode;\n        }\n        // At the leaf node, store the full route and its associated metadata\n        node.metadata = {\n            ...metadata,\n            route: normalizedRoute,\n        };\n        node.insertionIndex = this.insertionIndexCounter++;\n    }\n    /**\n     * Matches a given route against the route tree and returns the best matching route's metadata.\n     * The best match is determined by the lowest insertion index, meaning the earliest defined route\n     * takes precedence.\n     *\n     * @param route - The route path to match against the route tree.\n     * @returns The metadata of the best matching route or `undefined` if no match is found.\n     */\n    match(route) {\n        const segments = stripTrailingSlash(route).split('/');\n        return this.traverseBySegments(segments)?.metadata;\n    }\n    /**\n     * Converts the route tree into a serialized format representation.\n     * This method converts the route tree into an array of metadata objects that describe the structure of the tree.\n     * The array represents the routes in a nested manner where each entry includes the route and its associated metadata.\n     *\n     * @returns An array of `RouteTreeNodeMetadata` objects representing the route tree structure.\n     *          Each object includes the `route` and associated metadata of a route.\n     */\n    toObject() {\n        return Array.from(this.traverse());\n    }\n    /**\n     * Constructs a `RouteTree` from an object representation.\n     * This method is used to recreate a `RouteTree` instance from an array of metadata objects.\n     * The array should be in the format produced by `toObject`, allowing for the reconstruction of the route tree\n     * with the same routes and metadata.\n     *\n     * @param value - An array of `RouteTreeNodeMetadata` objects that represent the serialized format of the route tree.\n     *                Each object should include a `route` and its associated metadata.\n     * @returns A new `RouteTree` instance constructed from the provided metadata objects.\n     */\n    static fromObject(value) {\n        const tree = new RouteTree();\n        for (const { route, ...metadata } of value) {\n            tree.insert(route, metadata);\n        }\n        return tree;\n    }\n    /**\n     * A generator function that recursively traverses the route tree and yields the metadata of each node.\n     * This allows for easy and efficient iteration over all nodes in the tree.\n     *\n     * @param node - The current node to start the traversal from. Defaults to the root node of the tree.\n     */\n    *traverse(node = this.root) {\n        if (node.metadata) {\n            yield node.metadata;\n        }\n        for (const childNode of node.children.values()) {\n            yield* this.traverse(childNode);\n        }\n    }\n    /**\n     * Recursively traverses the route tree from a given node, attempting to match the remaining route segments.\n     * If the node is a leaf node (no more segments to match) and contains metadata, the node is yielded.\n     *\n     * This function prioritizes exact segment matches first, followed by wildcard matches (`*`),\n     * and finally deep wildcard matches (`**`) that consume all segments.\n     *\n     * @param remainingSegments - The remaining segments of the route path to match.\n     * @param node - The current node in the route tree to start traversal from.\n     *\n     * @returns The node that best matches the remaining segments or `undefined` if no match is found.\n     */\n    traverseBySegments(remainingSegments, node = this.root) {\n        const { metadata, children } = node;\n        // If there are no remaining segments and the node has metadata, return this node\n        if (!remainingSegments?.length) {\n            if (metadata) {\n                return node;\n            }\n            return;\n        }\n        // If the node has no children, end the traversal\n        if (!children.size) {\n            return;\n        }\n        const [segment, ...restSegments] = remainingSegments;\n        let currentBestMatchNode;\n        // 1. Exact segment match\n        const exactMatchNode = node.children.get(segment);\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, exactMatchNode));\n        // 2. Wildcard segment match (`*`)\n        const wildcardNode = node.children.get('*');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, this.traverseBySegments(restSegments, wildcardNode));\n        // 3. Deep wildcard segment match (`**`)\n        const deepWildcardNode = node.children.get('**');\n        currentBestMatchNode = this.getHigherPriorityNode(currentBestMatchNode, deepWildcardNode);\n        return currentBestMatchNode;\n    }\n    /**\n     * Compares two nodes and returns the node with higher priority based on insertion index.\n     * A node with a lower insertion index is prioritized as it was defined earlier.\n     *\n     * @param currentBestMatchNode - The current best match node.\n     * @param candidateNode - The node being evaluated for higher priority based on insertion index.\n     * @returns The node with higher priority (i.e., lower insertion index). If one of the nodes is `undefined`, the other node is returned.\n     */\n    getHigherPriorityNode(currentBestMatchNode, candidateNode) {\n        if (!candidateNode) {\n            return currentBestMatchNode;\n        }\n        if (!currentBestMatchNode) {\n            return candidateNode;\n        }\n        return candidateNode.insertionIndex < currentBestMatchNode.insertionIndex\n            ? candidateNode\n            : currentBestMatchNode;\n    }\n    /**\n     * Creates an empty route tree node with the specified segment.\n     * This helper function is used during the tree construction.\n     *\n     * @param segment - The route segment that this node represents.\n     * @returns A new, empty route tree node.\n     */\n    createEmptyRouteTreeNode(segment) {\n        return {\n            segment,\n            insertionIndex: -1,\n            children: new Map(),\n        };\n    }\n}\n//# sourceMappingURL=route-tree.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { APP_BASE_HREF, PlatformLocation } from '@angular/common';\nimport { ApplicationRef, Compiler, createPlatformFactory, platformCore, runInInjectionContext, ɵwhenStable as whenStable, ɵConsole, } from '@angular/core';\nimport { INITIAL_CONFIG, ɵINTERNAL_SERVER_PLATFORM_PROVIDERS as INTERNAL_SERVER_PLATFORM_PROVIDERS, } from '@angular/platform-server';\nimport { Router, ɵloadChildren as loadChildrenHelper } from '@angular/router';\nimport { ServerAssets } from '../assets';\nimport { Console } from '../console';\nimport { getAngularAppManifest } from '../manifest';\nimport { isNgModule } from '../utils/ng';\nimport { joinUrlParts } from '../utils/url';\nimport { PrerenderFallback, RenderMode, SERVER_ROUTES_CONFIG } from './route-config';\nimport { RouteTree } from './route-tree';\n/**\n * Regular expression to match segments preceded by a colon in a string.\n */\nconst URL_PARAMETER_REGEXP = /(?<!\\\\):([^/]+)/g;\n/**\n * An set of HTTP status codes that are considered valid for redirect responses.\n */\nconst VALID_REDIRECT_RESPONSE_CODES = new Set([301, 302, 303, 307, 308]);\n/**\n * Traverses an array of route configurations to generate route tree node metadata.\n *\n * This function processes each route and its children, handling redirects, SSG (Static Site Generation) settings,\n * and lazy-loaded routes. It yields route metadata for each route and its potential variants.\n *\n * @param options - The configuration options for traversing routes.\n * @returns An async iterable iterator of route tree node metadata.\n */\nexport async function* traverseRoutesConfig({ routes, compiler, parentInjector, parentRoute, serverConfigRouteTree, invokeGetPrerenderParams, }) {\n    for (const route of routes) {\n        const { path = '', redirectTo, loadChildren, children } = route;\n        const currentRoutePath = joinUrlParts(parentRoute, path);\n        // Get route metadata from the server config route tree, if available\n        const metadata = {\n            ...(serverConfigRouteTree\n                ? getMatchedRouteMetadata(serverConfigRouteTree, currentRoutePath)\n                : undefined),\n            route: currentRoutePath,\n        };\n        // Handle redirects\n        if (typeof redirectTo === 'string') {\n            const redirectToResolved = resolveRedirectTo(currentRoutePath, redirectTo);\n            if (metadata.status && !VALID_REDIRECT_RESPONSE_CODES.has(metadata.status)) {\n                throw new Error(`The '${metadata.status}' status code is not a valid redirect response code. ` +\n                    `Please use one of the following redirect response codes: ${[...VALID_REDIRECT_RESPONSE_CODES.values()].join(', ')}.`);\n            }\n            yield { ...metadata, redirectTo: redirectToResolved };\n        }\n        else if (metadata.renderMode === RenderMode.Prerender) {\n            // Handle SSG routes\n            yield* handleSSGRoute(metadata, parentInjector, invokeGetPrerenderParams);\n        }\n        else {\n            yield metadata;\n        }\n        // Recursively process child routes\n        if (children?.length) {\n            yield* traverseRoutesConfig({\n                routes: children,\n                compiler,\n                parentInjector,\n                parentRoute: currentRoutePath,\n                serverConfigRouteTree,\n                invokeGetPrerenderParams,\n            });\n        }\n        // Load and process lazy-loaded child routes\n        if (loadChildren) {\n            const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\n            if (loadedChildRoutes) {\n                const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\n                yield* traverseRoutesConfig({\n                    routes: childRoutes,\n                    compiler,\n                    parentInjector: injector,\n                    parentRoute: currentRoutePath,\n                    serverConfigRouteTree,\n                    invokeGetPrerenderParams,\n                });\n            }\n        }\n    }\n}\n/**\n * Retrieves the matched route metadata from the server configuration route tree.\n *\n * @param serverConfigRouteTree - The server configuration route tree.\n * @param currentRoutePath - The current route path being processed.\n * @returns The metadata associated with the matched route.\n */\nfunction getMatchedRouteMetadata(serverConfigRouteTree, currentRoutePath) {\n    const metadata = serverConfigRouteTree.match(currentRoutePath);\n    if (!metadata) {\n        throw new Error(`The '${currentRoutePath}' route does not match any route defined in the server routing configuration. ` +\n            'Please ensure this route is added to the server routing configuration.');\n    }\n    return metadata;\n}\n/**\n * Handles SSG (Static Site Generation) routes by invoking `getPrerenderParams` and yielding\n * all parameterized paths.\n *\n * @param metadata - The metadata associated with the route tree node.\n * @param parentInjector - The dependency injection container for the parent route.\n * @param invokeGetPrerenderParams - A flag indicating whether to invoke the `getPrerenderParams` function.\n * @returns An async iterable iterator that yields route tree node metadata for each SSG path.\n */\nasync function* handleSSGRoute(metadata, parentInjector, invokeGetPrerenderParams) {\n    if (metadata.renderMode !== RenderMode.Prerender) {\n        throw new Error(`'handleSSGRoute' was called for a route which rendering mode is not prerender.`);\n    }\n    const { route: currentRoutePath, fallback, ...meta } = metadata;\n    const getPrerenderParams = 'getPrerenderParams' in meta ? meta.getPrerenderParams : undefined;\n    if ('getPrerenderParams' in meta) {\n        delete meta['getPrerenderParams'];\n    }\n    if (invokeGetPrerenderParams && URL_PARAMETER_REGEXP.test(currentRoutePath)) {\n        if (!getPrerenderParams) {\n            throw new Error(`The '${currentRoutePath}' route uses prerendering and includes parameters, but 'getPrerenderParams' is missing. ` +\n                `Please define 'getPrerenderParams' function for this route in your server routing configuration ` +\n                `or specify a different 'renderMode'.`);\n        }\n        const parameters = await runInInjectionContext(parentInjector, () => getPrerenderParams());\n        for (const params of parameters) {\n            const routeWithResolvedParams = currentRoutePath.replace(URL_PARAMETER_REGEXP, (match) => {\n                const parameterName = match.slice(1);\n                const value = params[parameterName];\n                if (typeof value !== 'string') {\n                    throw new Error(`The 'getPrerenderParams' function defined for the '${currentRoutePath}' route ` +\n                        `returned a non-string value for parameter '${parameterName}'. ` +\n                        `Please make sure the 'getPrerenderParams' function returns values for all parameters ` +\n                        'specified in this route.');\n                }\n                return value;\n            });\n            yield { ...meta, route: routeWithResolvedParams };\n        }\n    }\n    // Handle fallback render modes\n    if (fallback !== PrerenderFallback.None || !invokeGetPrerenderParams) {\n        yield {\n            ...meta,\n            route: currentRoutePath,\n            renderMode: fallback === PrerenderFallback.Client ? RenderMode.Client : RenderMode.Server,\n        };\n    }\n}\n/**\n * Resolves the `redirectTo` property for a given route.\n *\n * This function processes the `redirectTo` property to ensure that it correctly\n * resolves relative to the current route path. If `redirectTo` is an absolute path,\n * it is returned as is. If it is a relative path, it is resolved based on the current route path.\n *\n * @param routePath - The current route path.\n * @param redirectTo - The target path for redirection.\n * @returns The resolved redirect path as a string.\n */\nfunction resolveRedirectTo(routePath, redirectTo) {\n    if (redirectTo[0] === '/') {\n        // If the redirectTo path is absolute, return it as is.\n        return redirectTo;\n    }\n    // Resolve relative redirectTo based on the current route path.\n    const segments = routePath.split('/');\n    segments.pop(); // Remove the last segment to make it relative.\n    return joinUrlParts(...segments, redirectTo);\n}\n/**\n * Builds a server configuration route tree from the given server routes configuration.\n *\n * @param serverRoutesConfig - The array of server routes to be used for configuration.\n * @returns A `RouteTree` populated with the server routes and their metadata.\n */\nfunction buildServerConfigRouteTree(serverRoutesConfig) {\n    const serverConfigRouteTree = new RouteTree();\n    for (const { path, ...metadata } of serverRoutesConfig) {\n        serverConfigRouteTree.insert(path, metadata);\n    }\n    return serverConfigRouteTree;\n}\n/**\n * Retrieves routes from the given Angular application.\n *\n * This function initializes an Angular platform, bootstraps the application or module,\n * and retrieves routes from the Angular router configuration. It handles both module-based\n * and function-based bootstrapping. It yields the resulting routes as `RouteTreeNodeMetadata` objects.\n *\n * @param bootstrap - A function that returns a promise resolving to an `ApplicationRef` or an Angular module to bootstrap.\n * @param document - The initial HTML document used for server-side rendering.\n * This document is necessary to render the application on the server.\n * @param url - The URL for server-side rendering. The URL is used to configure `ServerPlatformLocation`. This configuration is crucial\n * for ensuring that API requests for relative paths succeed, which is essential for accurate route extraction.\n * @param invokeGetPrerenderParams - A boolean flag indicating whether to invoke `getPrerenderParams` for parameterized SSG routes\n * to handle prerendering paths. Defaults to `false`.\n * See:\n *  - https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51\n *  - https://github.com/angular/angular/blob/6882cc7d9eed26d3caeedca027452367ba25f2b9/packages/platform-server/src/http.ts#L44\n * @returns A promise that resolves to an object of type `AngularRouterConfigResult`.\n */\nexport async function getRoutesFromAngularRouterConfig(bootstrap, document, url, invokeGetPrerenderParams = false) {\n    const { protocol, host } = url;\n    // Create and initialize the Angular platform for server-side rendering.\n    const platformRef = createPlatformFactory(platformCore, 'server', [\n        {\n            provide: INITIAL_CONFIG,\n            useValue: { document, url: `${protocol}//${host}/` },\n        },\n        {\n            provide: ɵConsole,\n            useFactory: () => new Console(),\n        },\n        ...INTERNAL_SERVER_PLATFORM_PROVIDERS,\n    ])();\n    try {\n        let applicationRef;\n        if (isNgModule(bootstrap)) {\n            const moduleRef = await platformRef.bootstrapModule(bootstrap);\n            applicationRef = moduleRef.injector.get(ApplicationRef);\n        }\n        else {\n            applicationRef = await bootstrap();\n        }\n        // Wait until the application is stable.\n        await whenStable(applicationRef);\n        const injector = applicationRef.injector;\n        const router = injector.get(Router);\n        const routesResults = [];\n        if (router.config.length) {\n            const compiler = injector.get(Compiler);\n            const serverRoutesConfig = injector.get(SERVER_ROUTES_CONFIG, null, { optional: true });\n            const serverConfigRouteTree = serverRoutesConfig\n                ? buildServerConfigRouteTree(serverRoutesConfig)\n                : undefined;\n            // Retrieve all routes from the Angular router configuration.\n            const traverseRoutes = traverseRoutesConfig({\n                routes: router.config,\n                compiler,\n                parentInjector: injector,\n                parentRoute: '',\n                serverConfigRouteTree,\n                invokeGetPrerenderParams,\n            });\n            for await (const result of traverseRoutes) {\n                routesResults.push(result);\n            }\n        }\n        else {\n            routesResults.push({ route: '', renderMode: RenderMode.Prerender });\n        }\n        const baseHref = injector.get(APP_BASE_HREF, null, { optional: true }) ??\n            injector.get(PlatformLocation).getBaseHrefFromDOM();\n        return {\n            baseHref,\n            routes: routesResults,\n        };\n    }\n    finally {\n        platformRef.destroy();\n    }\n}\n/**\n * Asynchronously extracts routes from the Angular application configuration\n * and creates a `RouteTree` to manage server-side routing.\n *\n * @param url - The URL for server-side rendering. The URL is used to configure `ServerPlatformLocation`. This configuration is crucial\n * for ensuring that API requests for relative paths succeed, which is essential for accurate route extraction.\n * See:\n *  - https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51\n *  - https://github.com/angular/angular/blob/6882cc7d9eed26d3caeedca027452367ba25f2b9/packages/platform-server/src/http.ts#L44\n * @param manifest - An optional `AngularAppManifest` that contains the application's routing and configuration details.\n * If not provided, the default manifest is retrieved using `getAngularAppManifest()`.\n * @param invokeGetPrerenderParams - A boolean flag indicating whether to invoke `getPrerenderParams` for parameterized SSG routes\n * to handle prerendering paths. Defaults to `false`.\n * @returns A promise that resolves to a populated `RouteTree` containing all extracted routes from the Angular application.\n */\nexport async function extractRoutesAndCreateRouteTree(url, manifest = getAngularAppManifest(), invokeGetPrerenderParams = false) {\n    const routeTree = new RouteTree();\n    const document = await new ServerAssets(manifest).getIndexServerHtml();\n    const bootstrap = await manifest.bootstrap();\n    const { baseHref, routes } = await getRoutesFromAngularRouterConfig(bootstrap, document, url, invokeGetPrerenderParams);\n    for (const { route, ...metadata } of routes) {\n        if (metadata.redirectTo !== undefined) {\n            metadata.redirectTo = joinUrlParts(baseHref, metadata.redirectTo);\n        }\n        const fullRoute = joinUrlParts(baseHref, route);\n        routeTree.insert(fullRoute, metadata);\n    }\n    return routeTree;\n}\n//# sourceMappingURL=ng-routes.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Manages a collection of hooks and provides methods to register and execute them.\n * Hooks are functions that can be invoked with specific arguments to allow modifications or enhancements.\n */\nexport class Hooks {\n    constructor() {\n        /**\n         * A map of hook names to arrays of hook functions.\n         * Each hook name can have multiple associated functions, which are executed in sequence.\n         */\n        this.store = new Map();\n    }\n    /**\n     * Executes all hooks associated with the specified name, passing the given argument to each hook function.\n     * The hooks are invoked sequentially, and the argument may be modified by each hook.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook whose functions will be executed.\n     * @param context - The input value to be passed to each hook function. The value is mutated by each hook function.\n     * @returns A promise that resolves once all hook functions have been executed.\n     *\n     * @example\n     * ```typescript\n     * const hooks = new Hooks();\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   ctx.html = ctx.html.replace(/foo/g, 'bar');\n     *   return ctx.html;\n     * });\n     * const result = await hooks.run('html:transform:pre', { html: '<div>foo</div>' });\n     * console.log(result); // '<div>bar</div>'\n     * ```\n     * @internal\n     */\n    async run(name, context) {\n        const hooks = this.store.get(name);\n        switch (name) {\n            case 'html:transform:pre': {\n                if (!hooks) {\n                    return context.html;\n                }\n                const ctx = { ...context };\n                for (const hook of hooks) {\n                    ctx.html = await hook(ctx);\n                }\n                return ctx.html;\n            }\n            default:\n                throw new Error(`Running hook \"${name}\" is not supported.`);\n        }\n    }\n    /**\n     * Registers a new hook function under the specified hook name.\n     * This function should be a function that takes an argument of type `T` and returns a `string` or `Promise<string>`.\n     *\n     * @template Hook - The type of the hook name. It should be one of the keys of `HooksMapping`.\n     * @param name - The name of the hook under which the function will be registered.\n     * @param handler - A function to be executed when the hook is triggered. The handler will be called with an argument\n     *                  that may be modified by the hook functions.\n     *\n     * @remarks\n     * - If there are existing handlers registered under the given hook name, the new handler will be added to the list.\n     * - If no handlers are registered under the given hook name, a new list will be created with the handler as its first element.\n     *\n     * @example\n     * ```typescript\n     * hooks.on('html:transform:pre', async (ctx) => {\n     *   return ctx.html.replace(/foo/g, 'bar');\n     * });\n     * ```\n     */\n    on(name, handler) {\n        const hooks = this.store.get(name);\n        if (hooks) {\n            hooks.push(handler);\n        }\n        else {\n            this.store.set(name, [handler]);\n        }\n    }\n    /**\n     * Checks if there are any hooks registered under the specified name.\n     *\n     * @param name - The name of the hook to check.\n     * @returns `true` if there are hooks registered under the specified name, otherwise `false`.\n     */\n    has(name) {\n        return !!this.store.get(name)?.length;\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { stripIndexHtmlFromURL } from '../utils/url';\nimport { extractRoutesAndCreateRouteTree } from './ng-routes';\nimport { RouteTree } from './route-tree';\n/**\n * Manages the application's server routing logic by building and maintaining a route tree.\n *\n * This class is responsible for constructing the route tree from the Angular application\n * configuration and using it to match incoming requests to the appropriate routes.\n */\nexport class ServerRouter {\n    /**\n     * Creates an instance of the `ServerRouter`.\n     *\n     * @param routeTree - An instance of `RouteTree` that holds the routing information.\n     * The `RouteTree` is used to match request URLs to the appropriate route metadata.\n     */\n    constructor(routeTree) {\n        this.routeTree = routeTree;\n    }\n    /**\n     * Static property to track the ongoing build promise.\n     */\n    static #extractionPromise;\n    /**\n     * Creates or retrieves a `ServerRouter` instance based on the provided manifest and URL.\n     *\n     * If the manifest contains pre-built routes, a new `ServerRouter` is immediately created.\n     * Otherwise, it builds the router by extracting routes from the Angular configuration\n     * asynchronously. This method ensures that concurrent builds are prevented by re-using\n     * the same promise.\n     *\n     * @param manifest - An instance of `AngularAppManifest` that contains the route information.\n     * @param url - The URL for server-side rendering. The URL is needed to configure `ServerPlatformLocation`.\n     * This is necessary to ensure that API requests for relative paths succeed, which is crucial for correct route extraction.\n     * [Reference](https://github.com/angular/angular/blob/d608b857c689d17a7ffa33bbb510301014d24a17/packages/platform-server/src/location.ts#L51)\n     * @returns A promise resolving to a `ServerRouter` instance.\n     */\n    static from(manifest, url) {\n        if (manifest.routes) {\n            const routeTree = RouteTree.fromObject(manifest.routes);\n            return Promise.resolve(new ServerRouter(routeTree));\n        }\n        // Create and store a new promise for the build process.\n        // This prevents concurrent builds by re-using the same promise.\n        ServerRouter.#extractionPromise ??= extractRoutesAndCreateRouteTree(url, manifest)\n            .then((routeTree) => new ServerRouter(routeTree))\n            .finally(() => {\n            ServerRouter.#extractionPromise = undefined;\n        });\n        return ServerRouter.#extractionPromise;\n    }\n    /**\n     * Matches a request URL against the route tree to retrieve route metadata.\n     *\n     * This method strips 'index.html' from the URL if it is present and then attempts\n     * to find a match in the route tree. If a match is found, it returns the associated\n     * route metadata; otherwise, it returns `undefined`.\n     *\n     * @param url - The URL to be matched against the route tree.\n     * @returns The metadata for the matched route or `undefined` if no match is found.\n     */\n    match(url) {\n        // Strip 'index.html' from URL if present.\n        // A request to `http://www.example.com/page/index.html` will render the Angular route corresponding to `http://www.example.com/page`.\n        const { pathname } = stripIndexHtmlFromURL(url);\n        return this.routeTree.match(decodeURIComponent(pathname));\n    }\n}\n//# sourceMappingURL=router.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Injection token for the current request.\n */\nexport const REQUEST = new InjectionToken('REQUEST');\n/**\n * Injection token for the response initialization options.\n */\nexport const RESPONSE_INIT = new InjectionToken('RESPONSE_INIT');\n/**\n * Injection token for additional request context.\n */\nexport const REQUEST_CONTEXT = new InjectionToken('REQUEST_CONTEXT');\n//# sourceMappingURL=tokens.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport Critters from '../../third_party/critters';\n/**\n * Pattern used to extract the media query set by Critters in an `onload` handler.\n */\nconst MEDIA_SET_HANDLER_PATTERN = /^this\\.media=[\"'](.*)[\"'];?$/;\n/**\n * Name of the attribute used to save the Critters media query so it can be re-assigned on load.\n */\nconst CSP_MEDIA_ATTR = 'ngCspMedia';\n/**\n * Script that dynamically updates the `media` attribute of `<link>` tags based on a custom attribute (`CSP_MEDIA_ATTR`).\n *\n * NOTE:\n * We do not use `document.querySelectorAll('link').forEach((s) => s.addEventListener('load', ...)`\n * because load events are not always triggered reliably on Chrome.\n * See: https://github.com/angular/angular-cli/issues/26932 and https://crbug.com/1521256\n *\n * The script:\n * - Ensures the event target is a `<link>` tag with the `CSP_MEDIA_ATTR` attribute.\n * - Updates the `media` attribute with the value of `CSP_MEDIA_ATTR` and then removes the attribute.\n * - Removes the event listener when all relevant `<link>` tags have been processed.\n * - Uses event capturing (the `true` parameter) since load events do not bubble up the DOM.\n */\nconst LINK_LOAD_SCRIPT_CONTENT = `\n(() => {\n  const CSP_MEDIA_ATTR = '${CSP_MEDIA_ATTR}';\n  const documentElement = document.documentElement;\n\n  // Listener for load events on link tags.\n  const listener = (e) => {\n    const target = e.target;\n    if (\n      !target ||\n      target.tagName !== 'LINK' ||\n      !target.hasAttribute(CSP_MEDIA_ATTR)\n    ) {\n      return;\n    }\n\n    target.media = target.getAttribute(CSP_MEDIA_ATTR);\n    target.removeAttribute(CSP_MEDIA_ATTR);\n\n    if (!document.head.querySelector(\\`link[\\${CSP_MEDIA_ATTR}]\\`)) {\n      documentElement.removeEventListener('load', listener);\n    }\n  };\n\n  documentElement.addEventListener('load', listener, true);\n})();\n`.trim();\nclass CrittersBase extends Critters {\n}\n/* eslint-enable @typescript-eslint/no-unsafe-declaration-merging */\nexport class InlineCriticalCssProcessor extends CrittersBase {\n    constructor(readFile, outputPath) {\n        super({\n            logger: {\n                // eslint-disable-next-line no-console\n                warn: (s) => console.warn(s),\n                // eslint-disable-next-line no-console\n                error: (s) => console.error(s),\n                info: () => { },\n            },\n            logLevel: 'warn',\n            path: outputPath,\n            publicPath: undefined,\n            compress: false,\n            pruneSource: false,\n            reduceInlineStyles: false,\n            mergeStylesheets: false,\n            // Note: if `preload` changes to anything other than `media`, the logic in\n            // `embedLinkedStylesheet` will have to be updated.\n            preload: 'media',\n            noscriptFallback: true,\n            inlineFonts: true,\n        });\n        this.readFile = readFile;\n        this.outputPath = outputPath;\n        this.addedCspScriptsDocuments = new WeakSet();\n        this.documentNonces = new WeakMap();\n    }\n    /**\n     * Override of the Critters `embedLinkedStylesheet` method\n     * that makes it work with Angular's CSP APIs.\n     */\n    async embedLinkedStylesheet(link, document) {\n        if (link.getAttribute('media') === 'print' && link.next?.name === 'noscript') {\n            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64\n            // NB: this is only needed for the webpack based builders.\n            const media = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (media) {\n                link.removeAttribute('onload');\n                link.setAttribute('media', media[1]);\n                link?.next?.remove();\n            }\n        }\n        const returnValue = await super.embedLinkedStylesheet(link, document);\n        const cspNonce = this.findCspNonce(document);\n        if (cspNonce) {\n            const crittersMedia = link.getAttribute('onload')?.match(MEDIA_SET_HANDLER_PATTERN);\n            if (crittersMedia) {\n                // If there's a Critters-generated `onload` handler and the file has an Angular CSP nonce,\n                // we have to remove the handler, because it's incompatible with CSP. We save the value\n                // in a different attribute and we generate a script tag with the nonce that uses\n                // `addEventListener` to apply the media query instead.\n                link.removeAttribute('onload');\n                link.setAttribute(CSP_MEDIA_ATTR, crittersMedia[1]);\n                this.conditionallyInsertCspLoadingScript(document, cspNonce, link);\n            }\n            // Ideally we would hook in at the time Critters inserts the `style` tags, but there isn't\n            // a way of doing that at the moment so we fall back to doing it any time a `link` tag is\n            // inserted. We mitigate it by only iterating the direct children of the `<head>` which\n            // should be pretty shallow.\n            document.head.children.forEach((child) => {\n                if (child.tagName === 'style' && !child.hasAttribute('nonce')) {\n                    child.setAttribute('nonce', cspNonce);\n                }\n            });\n        }\n        return returnValue;\n    }\n    /**\n     * Finds the CSP nonce for a specific document.\n     */\n    findCspNonce(document) {\n        if (this.documentNonces.has(document)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.documentNonces.get(document);\n        }\n        // HTML attribute are case-insensitive, but the parser used by Critters is case-sensitive.\n        const nonceElement = document.querySelector('[ngCspNonce], [ngcspnonce]');\n        const cspNonce = nonceElement?.getAttribute('ngCspNonce') || nonceElement?.getAttribute('ngcspnonce') || null;\n        this.documentNonces.set(document, cspNonce);\n        return cspNonce;\n    }\n    /**\n     * Inserts the `script` tag that swaps the critical CSS at runtime,\n     * if one hasn't been inserted into the document already.\n     */\n    conditionallyInsertCspLoadingScript(document, nonce, link) {\n        if (this.addedCspScriptsDocuments.has(document)) {\n            return;\n        }\n        if (document.head.textContent.includes(LINK_LOAD_SCRIPT_CONTENT)) {\n            // Script was already added during the build.\n            this.addedCspScriptsDocuments.add(document);\n            return;\n        }\n        const script = document.createElement('script');\n        script.setAttribute('nonce', nonce);\n        script.textContent = LINK_LOAD_SCRIPT_CONTENT;\n        // Prepend the script to the head since it needs to\n        // run as early as possible, before the `link` tags.\n        document.head.insertBefore(script, link);\n        this.addedCspScriptsDocuments.add(document);\n    }\n}\n//# sourceMappingURL=inline-critical-css.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { ɵresetCompiledComponents } from '@angular/core';\nimport { ServerAssets } from './assets';\nimport { Hooks } from './hooks';\nimport { getAngularAppManifest } from './manifest';\nimport { RenderMode } from './routes/route-config';\nimport { ServerRouter } from './routes/router';\nimport { REQUEST, REQUEST_CONTEXT, RESPONSE_INIT } from './tokens';\nimport { InlineCriticalCssProcessor } from './utils/inline-critical-css';\nimport { renderAngular } from './utils/ng';\n/**\n * A mapping of `RenderMode` enum values to corresponding string representations.\n *\n * This record is used to map each `RenderMode` to a specific string value that represents\n * the server context. The string values are used internally to differentiate\n * between various rendering strategies when processing routes.\n *\n * - `RenderMode.Prerender` maps to `'ssg'` (Static Site Generation).\n * - `RenderMode.Server` maps to `'ssr'` (Server-Side Rendering).\n * - `RenderMode.AppShell` maps to `'app-shell'` (pre-rendered application shell).\n * - `RenderMode.Client` maps to an empty string `''` (Client-Side Rendering, no server context needed).\n */\nconst SERVER_CONTEXT_VALUE = {\n    [RenderMode.Prerender]: 'ssg',\n    [RenderMode.Server]: 'ssr',\n    [RenderMode.AppShell]: 'app-shell',\n    [RenderMode.Client]: '',\n};\n/**\n * Represents a locale-specific Angular server application managed by the server application engine.\n *\n * The `AngularServerApp` class handles server-side rendering and asset management for a specific locale.\n */\nexport class AngularServerApp {\n    constructor() {\n        /**\n         * Hooks for extending or modifying the behavior of the server application.\n         * This instance can be used to attach custom functionality to various events in the server application lifecycle.\n         */\n        this.hooks = new Hooks();\n        /**\n         * The manifest associated with this server application.\n         */\n        this.manifest = getAngularAppManifest();\n        /**\n         * An instance of ServerAsset that handles server-side asset.\n         */\n        this.assets = new ServerAssets(this.manifest);\n    }\n    /**\n     * Renders a response for the given HTTP request using the server application.\n     *\n     * This method processes the request and returns a response based on the specified rendering context.\n     *\n     * @param request - The incoming HTTP request to be rendered.\n     * @param requestContext - Optional additional context for rendering, such as request metadata.\n     *\n     * @returns A promise that resolves to the HTTP response object resulting from the rendering, or null if no match is found.\n     */\n    render(request, requestContext) {\n        return Promise.race([\n            this.createAbortPromise(request),\n            this.handleRendering(request, /** isSsrMode */ true, requestContext),\n        ]);\n    }\n    /**\n     * Renders a page based on the provided URL via server-side rendering and returns the corresponding HTTP response.\n     * The rendering process can be interrupted by an abort signal, where the first resolved promise (either from the abort\n     * or the render process) will dictate the outcome.\n     *\n     * @param url - The full URL to be processed and rendered by the server.\n     * @param signal - (Optional) An `AbortSignal` object that allows for the cancellation of the rendering process.\n     * @returns A promise that resolves to the generated HTTP response object, or `null` if no matching route is found.\n     */\n    renderStatic(url, signal) {\n        const request = new Request(url, { signal });\n        return Promise.race([\n            this.createAbortPromise(request),\n            this.handleRendering(request, /** isSsrMode */ false),\n        ]);\n    }\n    /**\n     * Creates a promise that rejects when the request is aborted.\n     *\n     * @param request - The HTTP request to monitor for abortion.\n     * @returns A promise that never resolves but rejects with an `AbortError` if the request is aborted.\n     */\n    createAbortPromise(request) {\n        return new Promise((_, reject) => {\n            request.signal.addEventListener('abort', () => {\n                const abortError = new Error(`Request for: ${request.url} was aborted.\\n${request.signal.reason}`);\n                abortError.name = 'AbortError';\n                reject(abortError);\n            }, { once: true });\n        });\n    }\n    /**\n     * Handles the server-side rendering process for the given HTTP request.\n     * This method matches the request URL to a route and performs rendering if a matching route is found.\n     *\n     * @param request - The incoming HTTP request to be processed.\n     * @param isSsrMode - A boolean indicating whether the rendering is performed in server-side rendering (SSR) mode.\n     * @param requestContext - Optional additional context for rendering, such as request metadata.\n     *\n     * @returns A promise that resolves to the rendered response, or null if no matching route is found.\n     */\n    async handleRendering(request, isSsrMode, requestContext) {\n        const url = new URL(request.url);\n        this.router ??= await ServerRouter.from(this.manifest, url);\n        const matchedRoute = this.router.match(url);\n        if (!matchedRoute) {\n            // Not a known Angular route.\n            return null;\n        }\n        const { redirectTo, status } = matchedRoute;\n        if (redirectTo !== undefined) {\n            // Note: The status code is validated during route extraction.\n            // 302 Found is used by default for redirections\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect_static#status\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return Response.redirect(new URL(redirectTo, url), status ?? 302);\n        }\n        const { renderMode = isSsrMode ? RenderMode.Server : RenderMode.Prerender, headers } = matchedRoute;\n        const platformProviders = [];\n        let responseInit;\n        if (isSsrMode) {\n            // Initialize the response with status and headers if available.\n            responseInit = {\n                status,\n                headers: headers ? new Headers(headers) : undefined,\n            };\n            if (renderMode === RenderMode.Client) {\n                // Serve the client-side rendered version if the route is configured for CSR.\n                return new Response(await this.assets.getServerAsset('index.csr.html'), responseInit);\n            }\n            platformProviders.push({\n                provide: REQUEST,\n                useValue: request,\n            }, {\n                provide: REQUEST_CONTEXT,\n                useValue: requestContext,\n            }, {\n                provide: RESPONSE_INIT,\n                useValue: responseInit,\n            });\n        }\n        const { manifest, hooks, assets } = this;\n        let html = await assets.getIndexServerHtml();\n        // Skip extra microtask if there are no pre hooks.\n        if (hooks.has('html:transform:pre')) {\n            html = await hooks.run('html:transform:pre', { html });\n        }\n        this.boostrap ??= await manifest.bootstrap();\n        html = await renderAngular(html, this.boostrap, new URL(request.url), platformProviders, SERVER_CONTEXT_VALUE[renderMode]);\n        if (manifest.inlineCriticalCss) {\n            // Optionally inline critical CSS.\n            this.inlineCriticalCssProcessor ??= new InlineCriticalCssProcessor((path) => {\n                const fileName = path.split('/').pop() ?? path;\n                return this.assets.getServerAsset(fileName);\n            });\n            html = await this.inlineCriticalCssProcessor.process(html);\n        }\n        return new Response(html, responseInit);\n    }\n}\nlet angularServerApp;\n/**\n * Retrieves or creates an instance of `AngularServerApp`.\n * - If an instance of `AngularServerApp` already exists, it will return the existing one.\n * - If no instance exists, it will create a new one with the provided options.\n * @returns The existing or newly created instance of `AngularServerApp`.\n */\nexport function getOrCreateAngularServerApp() {\n    return (angularServerApp ??= new AngularServerApp());\n}\n/**\n * Destroys the existing `AngularServerApp` instance, releasing associated resources and resetting the\n * reference to `undefined`.\n *\n * This function is primarily used to enable the recreation of the `AngularServerApp` instance,\n * typically when server configuration or application state needs to be refreshed.\n */\nexport function destroyAngularServerApp() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Need to clean up GENERATED_COMP_IDS map in `@angular/core`.\n        // Otherwise an incorrect component ID generation collision detected warning will be displayed in development.\n        // See: https://github.com/angular/angular-cli/issues/25924\n        ɵresetCompiledComponents();\n    }\n    angularServerApp = undefined;\n}\n//# sourceMappingURL=app.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n// ɵgetRoutesFromAngularRouterConfig is only used by the Webpack based server builder.\nexport { getRoutesFromAngularRouterConfig as ɵgetRoutesFromAngularRouterConfig, extractRoutesAndCreateRouteTree as ɵextractRoutesAndCreateRouteTree, } from './src/routes/ng-routes';\nexport { getOrCreateAngularServerApp as ɵgetOrCreateAngularServerApp, destroyAngularServerApp as ɵdestroyAngularServerApp, } from './src/app';\nexport { setAngularAppManifest as ɵsetAngularAppManifest, setAngularAppEngineManifest as ɵsetAngularAppEngineManifest, } from './src/manifest';\nexport { InlineCriticalCssProcessor as ɵInlineCriticalCssProcessor } from './src/utils/inline-critical-css';\n//# sourceMappingURL=private_export.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Extracts a potential locale ID from a given URL based on the specified base path.\n *\n * This function parses the URL to locate a potential locale identifier that immediately\n * follows the base path segment in the URL's pathname. If the URL does not contain a valid\n * locale ID, an empty string is returned.\n *\n * @param url - The full URL from which to extract the locale ID.\n * @param basePath - The base path used as the reference point for extracting the locale ID.\n * @returns The extracted locale ID if present, or an empty string if no valid locale ID is found.\n *\n * @example\n * ```js\n * const url = new URL('https://example.com/base/en/page');\n * const basePath = '/base';\n * const localeId = getPotentialLocaleIdFromUrl(url, basePath);\n * console.log(localeId); // Output: 'en'\n * ```\n */\nexport function getPotentialLocaleIdFromUrl(url, basePath) {\n    const { pathname } = url;\n    // Move forward of the base path section.\n    let start = basePath.length;\n    if (pathname[start] === '/') {\n        start++;\n    }\n    // Find the next forward slash.\n    let end = pathname.indexOf('/', start);\n    if (end === -1) {\n        end = pathname.length;\n    }\n    // Extract the potential locale id.\n    return pathname.slice(start, end);\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { Hooks } from './hooks';\nimport { getPotentialLocaleIdFromUrl } from './i18n';\nimport { getAngularAppEngineManifest } from './manifest';\nimport { stripIndexHtmlFromURL } from './utils/url';\n/**\n * Angular server application engine.\n * Manages Angular server applications (including localized ones), handles rendering requests,\n * and optionally transforms index HTML before rendering.\n *\n * @note This class should be instantiated once and used as a singleton across the server-side\n * application to ensure consistent handling of rendering requests and resource management.\n *\n * @developerPreview\n */\nexport class AngularAppEngine {\n    constructor() {\n        /**\n         * The manifest for the server application.\n         */\n        this.manifest = getAngularAppEngineManifest();\n    }\n    /**\n     * Hooks for extending or modifying the behavior of the server application.\n     * These hooks are used by the Angular CLI when running the development server and\n     * provide extensibility points for the application lifecycle.\n     *\n     * @private\n     */\n    static { this.ɵhooks = new Hooks(); }\n    /**\n     * Provides access to the hooks for extending or modifying the server application's behavior.\n     * This allows attaching custom functionality to various server application lifecycle events.\n     *\n     * @internal\n     */\n    get hooks() {\n        return AngularAppEngine.ɵhooks;\n    }\n    /**\n     * Renders a response for the given HTTP request using the server application.\n     *\n     * This method processes the request, determines the appropriate route and rendering context,\n     * and returns an HTTP response.\n     *\n     * If the request URL appears to be for a file (excluding `/index.html`), the method returns `null`.\n     * A request to `https://www.example.com/page/index.html` will render the Angular route\n     * corresponding to `https://www.example.com/page`.\n     *\n     * @param request - The incoming HTTP request object to be rendered.\n     * @param requestContext - Optional additional context for the request, such as metadata.\n     * @returns A promise that resolves to a Response object, or `null` if the request URL represents a file (e.g., `./logo.png`)\n     * rather than an application route.\n     */\n    async render(request, requestContext) {\n        // Skip if the request looks like a file but not `/index.html`.\n        const url = new URL(request.url);\n        const entryPoint = this.getEntryPointFromUrl(url);\n        if (!entryPoint) {\n            return null;\n        }\n        const { ɵgetOrCreateAngularServerApp: getOrCreateAngularServerApp } = await entryPoint();\n        // Note: Using `instanceof` is not feasible here because `AngularServerApp` will\n        // be located in separate bundles, making `instanceof` checks unreliable.\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        const serverApp = getOrCreateAngularServerApp();\n        serverApp.hooks = this.hooks;\n        return serverApp.render(request, requestContext);\n    }\n    /**\n     * Retrieves the entry point path and locale for the Angular server application based on the provided URL.\n     *\n     * This method determines the appropriate entry point and locale for rendering the application by examining the URL.\n     * If there is only one entry point available, it is returned regardless of the URL.\n     * Otherwise, the method extracts a potential locale identifier from the URL and looks up the corresponding entry point.\n     *\n     * @param url - The URL used to derive the locale and determine the appropriate entry point.\n     * @returns A function that returns a promise resolving to an object with the `EntryPointExports` type,\n     * or `undefined` if no matching entry point is found for the extracted locale.\n     */\n    getEntryPointFromUrl(url) {\n        const { entryPoints, basePath } = this.manifest;\n        if (entryPoints.size === 1) {\n            return entryPoints.values().next().value;\n        }\n        const potentialLocale = getPotentialLocaleIdFromUrl(url, basePath);\n        return entryPoints.get(potentialLocale);\n    }\n    /**\n     * Retrieves HTTP headers for a request associated with statically generated (SSG) pages,\n     * based on the URL pathname.\n     *\n     * @param request - The incoming request object.\n     * @returns A `Map` containing the HTTP headers as key-value pairs.\n     * @note This function should be used exclusively for retrieving headers of SSG pages.\n     */\n    getPrerenderHeaders(request) {\n        if (this.manifest.staticPathsHeaders.size === 0) {\n            return new Map();\n        }\n        const { pathname } = stripIndexHtmlFromURL(new URL(request.url));\n        const headers = this.manifest.staticPathsHeaders.get(pathname);\n        return new Map(headers);\n    }\n}\n//# sourceMappingURL=app-engine.js.map"],"names":["ɵConsole","SERVER_CONTEXT","loadChildrenHelper","INTERNAL_SERVER_PLATFORM_PROVIDERS","whenStable","ɵresetCompiledComponents"],"mappings":"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"}