/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const PERFORMANCE_MARK_PREFIX = '🅰️';
export function printPerformanceLogs() {
    let maxWordLength = 0;
    const benchmarks = [];
    for (const { name, duration } of performance.getEntriesByType('measure')) {
        if (!name.startsWith(PERFORMANCE_MARK_PREFIX)) {
            continue;
        }
        // `🅰️:Retrieve SSG Page` -> `Retrieve SSG Page:`
        const step = name.slice(PERFORMANCE_MARK_PREFIX.length + 1) + ':';
        if (step.length > maxWordLength) {
            maxWordLength = step.length;
        }
        benchmarks.push([step, `${duration.toFixed(1)}ms`]);
        performance.clearMeasures(name);
    }
    /* eslint-disable no-console */
    console.log('********** Performance results **********');
    for (const [step, value] of benchmarks) {
        const spaces = maxWordLength - step.length + 5;
        console.log(step + ' '.repeat(spaces) + value);
    }
    console.log('*****************************************');
    /* eslint-enable no-console */
}
export async function runMethodAndMeasurePerf(label, asyncMethod) {
    const labelName = `${PERFORMANCE_MARK_PREFIX}:${label}`;
    const startLabel = `start:${labelName}`;
    const endLabel = `end:${labelName}`;
    try {
        performance.mark(startLabel);
        return await asyncMethod();
    }
    finally {
        performance.mark(endLabel);
        performance.measure(labelName, startLabel, endLabel);
        performance.clearMarks(startLabel);
        performance.clearMarks(endLabel);
    }
}
export function noopRunMethodAndMeasurePerf(label, asyncMethod) {
    return asyncMethod();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVmb3JtYW5jZS1wcm9maWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3NyL3NyYy9wZWZvcm1hbmNlLXByb2ZpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxDQUFDO0FBRXRDLE1BQU0sVUFBVSxvQkFBb0I7SUFDbEMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sVUFBVSxHQUFvQyxFQUFFLENBQUM7SUFFdkQsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1lBQzdDLFNBQVM7U0FDVjtRQUVELGtEQUFrRDtRQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDbEUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsRUFBRTtZQUMvQixhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUM3QjtRQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFFRCwrQkFBK0I7SUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0lBQ3pELEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxVQUFVLEVBQUU7UUFDdEMsTUFBTSxNQUFNLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7S0FDaEQ7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDekQsOEJBQThCO0FBQ2hDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHVCQUF1QixDQUMzQyxLQUFhLEVBQ2IsV0FBNkI7SUFFN0IsTUFBTSxTQUFTLEdBQUcsR0FBRyx1QkFBdUIsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUN4RCxNQUFNLFVBQVUsR0FBRyxTQUFTLFNBQVMsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sUUFBUSxHQUFHLE9BQU8sU0FBUyxFQUFFLENBQUM7SUFFcEMsSUFBSTtRQUNGLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFN0IsT0FBTyxNQUFNLFdBQVcsRUFBRSxDQUFDO0tBQzVCO1lBQVM7UUFDUixXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRCxXQUFXLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbEM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxLQUFhLEVBQ2IsV0FBNkI7SUFFN0IsT0FBTyxXQUFXLEVBQUUsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmNvbnN0IFBFUkZPUk1BTkNFX01BUktfUFJFRklYID0gJ/CfhbDvuI8nO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRQZXJmb3JtYW5jZUxvZ3MoKTogdm9pZCB7XG4gIGxldCBtYXhXb3JkTGVuZ3RoID0gMDtcbiAgY29uc3QgYmVuY2htYXJrczogW3N0ZXA6IHN0cmluZywgdmFsdWU6IHN0cmluZ11bXSA9IFtdO1xuXG4gIGZvciAoY29uc3QgeyBuYW1lLCBkdXJhdGlvbiB9IG9mIHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoJ21lYXN1cmUnKSkge1xuICAgIGlmICghbmFtZS5zdGFydHNXaXRoKFBFUkZPUk1BTkNFX01BUktfUFJFRklYKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYPCfhbDvuI86UmV0cmlldmUgU1NHIFBhZ2VgIC0+IGBSZXRyaWV2ZSBTU0cgUGFnZTpgXG4gICAgY29uc3Qgc3RlcCA9IG5hbWUuc2xpY2UoUEVSRk9STUFOQ0VfTUFSS19QUkVGSVgubGVuZ3RoICsgMSkgKyAnOic7XG4gICAgaWYgKHN0ZXAubGVuZ3RoID4gbWF4V29yZExlbmd0aCkge1xuICAgICAgbWF4V29yZExlbmd0aCA9IHN0ZXAubGVuZ3RoO1xuICAgIH1cblxuICAgIGJlbmNobWFya3MucHVzaChbc3RlcCwgYCR7ZHVyYXRpb24udG9GaXhlZCgxKX1tc2BdKTtcbiAgICBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzKG5hbWUpO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBjb25zb2xlLmxvZygnKioqKioqKioqKiBQZXJmb3JtYW5jZSByZXN1bHRzICoqKioqKioqKionKTtcbiAgZm9yIChjb25zdCBbc3RlcCwgdmFsdWVdIG9mIGJlbmNobWFya3MpIHtcbiAgICBjb25zdCBzcGFjZXMgPSBtYXhXb3JkTGVuZ3RoIC0gc3RlcC5sZW5ndGggKyA1O1xuICAgIGNvbnNvbGUubG9nKHN0ZXAgKyAnICcucmVwZWF0KHNwYWNlcykgKyB2YWx1ZSk7XG4gIH1cbiAgY29uc29sZS5sb2coJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJyk7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuTWV0aG9kQW5kTWVhc3VyZVBlcmY8VD4oXG4gIGxhYmVsOiBzdHJpbmcsXG4gIGFzeW5jTWV0aG9kOiAoKSA9PiBQcm9taXNlPFQ+LFxuKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IGxhYmVsTmFtZSA9IGAke1BFUkZPUk1BTkNFX01BUktfUFJFRklYfToke2xhYmVsfWA7XG4gIGNvbnN0IHN0YXJ0TGFiZWwgPSBgc3RhcnQ6JHtsYWJlbE5hbWV9YDtcbiAgY29uc3QgZW5kTGFiZWwgPSBgZW5kOiR7bGFiZWxOYW1lfWA7XG5cbiAgdHJ5IHtcbiAgICBwZXJmb3JtYW5jZS5tYXJrKHN0YXJ0TGFiZWwpO1xuXG4gICAgcmV0dXJuIGF3YWl0IGFzeW5jTWV0aG9kKCk7XG4gIH0gZmluYWxseSB7XG4gICAgcGVyZm9ybWFuY2UubWFyayhlbmRMYWJlbCk7XG4gICAgcGVyZm9ybWFuY2UubWVhc3VyZShsYWJlbE5hbWUsIHN0YXJ0TGFiZWwsIGVuZExhYmVsKTtcbiAgICBwZXJmb3JtYW5jZS5jbGVhck1hcmtzKHN0YXJ0TGFiZWwpO1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoZW5kTGFiZWwpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wUnVuTWV0aG9kQW5kTWVhc3VyZVBlcmY8VD4oXG4gIGxhYmVsOiBzdHJpbmcsXG4gIGFzeW5jTWV0aG9kOiAoKSA9PiBQcm9taXNlPFQ+LFxuKTogUHJvbWlzZTxUPiB7XG4gIHJldHVybiBhc3luY01ldGhvZCgpO1xufVxuIl19